<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<groupId>com.librecoder.awesome</groupId>
		<artifactId>awesome-bom</artifactId>
		<version>2.0.1-SNAPSHOT</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>
	<artifactId>awesome-base</artifactId>
	<packaging>pom</packaging>

	<properties>
		<maven.test.skip>true</maven.test.skip>
		<checkstyle.skip>true</checkstyle.skip>
		<findbugs.skip>true</findbugs.skip>
		<pmd.skip>true</pmd.skip>
	</properties>

	<dependencies>
		<!-- region BuildTools -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<type>pom</type>
		</dependency>
		<!-- endregion BuildTools -->

		<!-- region TestFramework -->
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-inline</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- endregion -->

	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<build>
		<defaultGoal>install</defaultGoal>
		<finalName>${project.artifactId}-${project.version}</finalName>

		<pluginManagement>
			<plugins>
				<!-- region check -->
				<!-- findbugs 静态分析工具 -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>findbugs-maven-plugin</artifactId>
					<version>3.0.5</version>
					<configuration>
						<skip>${findbugs.skip}</skip>
						<failOnError>false</failOnError>
						<xmlOutput>true</xmlOutput>
						<findbugsXmlOutput>true</findbugsXmlOutput>
					</configuration>
					<executions>
						<execution>
							<phase>compile</phase>
							<goals>
								<goal>findbugs</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- 代码风格检查 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>3.1.2</version>
					<configuration>
						<skip>${checkstyle.skip}</skip>
						<failsOnError>true</failsOnError>
						<failOnViolation>true</failOnViolation>
						<logViolationsToConsole>true</logViolationsToConsole>
						<encoding>${project.build.sourceEncoding}</encoding>
						<consoleOutput>true</consoleOutput>
						<configLocation>checkstyle/checkstyle.xml</configLocation>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>com.librecoder.awesome</groupId>
							<artifactId>awesome-build-tools</artifactId>
							<version>${module.project.version}</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<phase>validate</phase>
							<goals>
								<goal>checkstyle</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- pmd Java程序代码检查工具 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-pmd-plugin</artifactId>
					<version>3.8</version>
					<configuration>
						<skip>${pmd.skip}</skip>
						<failOnViolation>false</failOnViolation>
						<printFailingErrors>true</printFailingErrors>
						<rulesets>
							<ruleset>rulesets/java/ali-comment.xml</ruleset>
							<ruleset>rulesets/java/ali-concurrent.xml</ruleset>
							<ruleset>rulesets/java/ali-constant.xml</ruleset>
							<ruleset>rulesets/java/ali-exception.xml</ruleset>
							<ruleset>rulesets/java/ali-flowcontrol.xml</ruleset>
							<ruleset>rulesets/java/ali-naming.xml</ruleset>
							<ruleset>rulesets/java/ali-oop.xml</ruleset>
							<ruleset>rulesets/java/ali-orm.xml</ruleset>
							<ruleset>rulesets/java/ali-other.xml</ruleset>
							<ruleset>rulesets/java/ali-set.xml</ruleset>
						</rulesets>
					</configuration>
					<dependencies>
						<dependency>
							<!-- 需要使用阿里的一些xml文件，因此需要这里增加p3c的依赖 -->
							<groupId>com.alibaba.p3c</groupId>
							<artifactId>p3c-pmd</artifactId>
							<version>1.3.0</version>
						</dependency>
					</dependencies>
				</plugin>
				<!-- endregion-->
			</plugins>
		</pluginManagement>

		<plugins>
			<!-- region check -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
			</plugin>
			<!-- endregion -->
		</plugins>
	</build>

	<reporting>
		<excludeDefaults>true</excludeDefaults>
		<outputDirectory>${project.build.directory}/site/${project.artifactId}</outputDirectory>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
			</plugin>

			<!-- 生成javadoc文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9</version>
				<reportSets>
					<reportSet><!-- by default, id = "default" -->
						<reports><!-- select non-aggregate reports -->
							<report>javadoc</report>
							<report>test-javadoc</report>
						</reports>
					</reportSet>
					<reportSet><!-- aggregate reportSet, to define in poms having modules -->
						<id>aggregate</id>
						<inherited>false</inherited><!-- don't run aggregate in child modules -->
						<reports>
							<report>aggregate</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<!-- 项目信息过滤 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.6</version>
				<reportSets>
					<reportSet>
						<reports>
							<!-- index一定要生成,否则链接问题 -->
							<report>index</report>
							<report>dependencies</report>
							<report>project-team</report>
							<report>issue-tracking</report>
							<report>license</report>
							<report>scm</report>
							<report>cim</report>
							<report>modules</report>
							<report>plugins</report>
							<report>help</report>
							<report>summary</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<!-- 单元测试 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<!--<argLine>-Xmx256M</argLine>-->
					<includes>
						<include>**/Test*.java</include>
						<include>**/*Test.java</include>
						<include>**/*TestCase.java</include>
					</includes>
				</configuration>
			</plugin>
			<!-- 源码查看生成 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
				</configuration>
			</plugin>
			<!-- cobertura 代码覆盖率工具 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<configuration>
					<check>
						<branchRate>85</branchRate>
						<lineRate>85</lineRate>
						<haltOnFailure>true</haltOnFailure>
						<totalBranchRate>85</totalBranchRate>
						<totalLineRate>85</totalLineRate>
						<packageLineRate>85</packageLineRate>
						<packageBranchRate>85</packageBranchRate>
						<regexes>
							<regex>
								<pattern>todo.*</pattern>
								<branchRate>90</branchRate>
								<lineRate>80</lineRate>
							</regex>
						</regexes>
					</check>
					<instrumentation>
						<ignores>
							<ignore>todo.*</ignore>
						</ignores>
						<excludes>
							<exclude>todo/**/*.class</exclude>
						</excludes>
					</instrumentation>
				</configuration>
			</plugin>
			<!-- taglist报表 生成标注上@todo或TODO的项目的列表 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>taglist-maven-plugin</artifactId>
				<version>2.4</version>
			</plugin>
		</plugins>
	</reporting>

</project>
