#parse("/vm/include.vm")
package ${pkgPrefix}${env.servicePackage.replace('/','.')};

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Function;

import javax.validation.Valid;
import javax.validation.constraints.*;

import io.polaris.core.guid.Guid;
import io.polaris.core.guid.Guids;
import io.polaris.core.time.Dates;
import io.polaris.core.lang.bean.Beans;
import io.polaris.core.string.Strings;
import io.polaris.core.jdbc.sql.query.OrderBy;
import io.polaris.core.jdbc.sql.query.Queries;
import io.polaris.core.jdbc.sql.query.Pageable;
import io.polaris.core.jdbc.sql.statement.SelectStatement;
import io.polaris.mybatis.util.MybatisToolkit;
import io.polaris.validation.Validations;
import io.polaris.validation.group.*;

import lombok.*;
import lombok.experimental.*;
import lombok.extern.slf4j.*;

import org.apache.ibatis.cursor.Cursor;
import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import io.polaris.framework.core.context.AppCtx;
import io.polaris.framework.core.context.bean.BeanRef;
import io.polaris.framework.core.fs.domain.CsvFileDto;
import io.polaris.framework.core.fs.domain.ExcelFileDto;
import io.polaris.framework.core.fs.domain.FileDto;
import io.polaris.framework.core.fs.excel.ExcelConfig;
import io.polaris.framework.infra.cache.BrmCaches;
import io.polaris.framework.infra.session.AppSessions;

import ${pkgPrefix}${env.mapperPackage.replace('/','.')}.${table.javaClassName}${env.mapperClassSuffix};
import ${pkgPrefix}${env.entityPackage.replace('/','.')}.${table.javaClassName}${env.entityClassSuffix};
import ${pkgPrefix}${env.entityPackage.replace('/','.')}.${table.javaClassName}${env.entityClassSuffix}Sql;

/**
 * $!{table.name}
 * $!{table.comment}
 * @author $!{env.author}
## * @since ${current.date}
 */
@Slf4j
@Service
public class ${table.javaClassName}${env.serviceClassSuffix} {
	public static final BeanRef<${table.javaClassName}${env.serviceClassSuffix}> REF = BeanRef.of(${table.javaClassName}${env.serviceClassSuffix}.class);
	private final Guid guid = Guids.getInstance(${table.javaClassName}${env.entityClassSuffix}.class, AppCtx.getPlatformProperties().getAppId());
	private final ${table.javaClassName}${env.mapperClassSuffix} mapper;
	private final ExcelConfig defaultExcelConfig = buildDefaultExcelConfig();
	private static final ThreadLocal<Boolean> preferSqlStatementLocal = new ThreadLocal<>();

	public ${table.javaClassName}${env.serviceClassSuffix}(@Autowired ${table.javaClassName}${env.mapperClassSuffix} mapper) {
		this.mapper = mapper;
	}

	public Guid guid() {
		return this.guid;
	}

	public <R> R preferSqlStatement(Function<BpmProcDefInfoService, R> function) {
		return preferSqlStatement(true, function);
	}

	public <R> R preferSqlStatement(boolean preferSqlStatement, Function<BpmProcDefInfoService, R> function) {
		preferSqlStatementLocal.set(preferSqlStatement);
		try {
			return function.apply(this);
		} finally {
			preferSqlStatementLocal.remove();
		}
	}

	private boolean preferSqlStatement() {
		Boolean bool = preferSqlStatementLocal.get();
		if (bool != null) {
			return bool;
		}
		return false;
	}

	@Transactional(rollbackFor = Exception.class)
	public <V> V doTransactional(Function<${table.javaClassName}${env.mapperClassSuffix}, V> function) {
		return function.apply(mapper);
	}


	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void visitAll(Object param, Consumer<${table.javaClassName}${env.entityClassSuffix}> visitor) {
		visitAll(param, null, null, visitor);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void visitAll(Object param, OrderBy orderBy, Consumer<${table.javaClassName}${env.entityClassSuffix}> visitor) {
		visitAll(param, orderBy, null, visitor);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void visitAll(Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder, Consumer<${table.javaClassName}${env.entityClassSuffix}> visitor) {
		visitAll(null, null, sqlBuilder, visitor);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void visitAll(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder, Consumer<${table.javaClassName}${env.entityClassSuffix}> visitor) {
		Cursor<${table.javaClassName}${env.entityClassSuffix}> cursor = getCursor(param, orderBy, sqlBuilder);
		try {
			Iterator<${table.javaClassName}${env.entityClassSuffix}> iter = cursor.iterator();
			for (int i = 0; iter.hasNext(); i++) {
				${table.javaClassName}${env.entityClassSuffix} o = iter.next();
				visitor.accept(o);
			}
		} finally {
			IO.close(cursor);
		}
	}

	private Cursor<${table.javaClassName}${env.entityClassSuffix}> getCursor(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		if (sqlBuilder != null) {
			return getCursorBySql(param, orderBy, sqlBuilder);
		}
		if (preferSqlStatement()) {
			return getCursorBySql(param, orderBy, null);
		}
		if (param instanceof ${table.javaClassName}${env.entityClassSuffix}) {
			return mapper.selectEntityCursor((${table.javaClassName}${env.entityClassSuffix}) param, orderBy);
		} else if (param instanceof Map) {
			// noinspection unchecked
			return mapper.selectEntityCursorByMap((Map<String, Object>) param, orderBy);
		} else {
			return getCursorBySql(param, orderBy, null);
		}
	}

	private Cursor<${table.javaClassName}${env.entityClassSuffix}> getCursorBySql(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		${table.javaClassName}${env.entityClassSuffix}Sql.Select sql = ${table.javaClassName}${env.entityClassSuffix}Sql.select().selectAll();
		if (param != null) {
			sql.where().byEntity(param);
		}
		if (orderBy != null) {
			sql.orderBy(orderBy);
		}
		if (sqlBuilder != null) {
			SelectStatement<?> newSql = sqlBuilder.apply(sql);
			if (newSql != null) {
				return mapper.selectEntityCursorBySql(newSql);
			}
		}
		return mapper.selectEntityCursorBySql(sql);
	}

	private ExcelConfig buildDefaultExcelConfig() {
		return new ExcelConfig()
			#foreach($col in $table.columns)
				#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
				.withDateColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.${col.javaVariableName}, "#if(${col.label})${col.label}#else${col.name}#end", Dates.PATTERN_YYYY_MM_DD_HH_MM_SS)
				#elseif(
					!${col.javaVariableName.equals('createUser')} && !${col.javaVariableName.equals('createUserId')}
					&& !${col.javaVariableName.equals('createUserName')} && !${col.javaVariableName.equals('createUserRealName')}
					&& !${col.javaVariableName.equals('updateUser')} && !${col.javaVariableName.equals('updateUserId')}
					&& !${col.javaVariableName.equals('updateUserName')} && !${col.javaVariableName.equals('updateUserRealName')}
					&& !${col.javaVariableName.equals('crtUserId')} && !${col.javaVariableName.equals('crtUserName')}
					&& !${col.javaVariableName.equals('crtUser')} && !${col.javaVariableName.equals('crtUserRealName')}
					&& !${col.javaVariableName.equals('uptUserId')} && !${col.javaVariableName.equals('uptUserName')}
					&& !${col.javaVariableName.equals('uptUser')} && !${col.javaVariableName.equals('uptUserRealName')}
				)
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.${col.javaVariableName}, "#if(${col.label})${col.label}#else${col.name}#end")
				#end
			#end
			#if(${table.containsColumnVariableName('createUserName')})
				#set($col=${table.getColumnByVariableName('createUserName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.createUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif( ${table.containsColumnVariableName('createUserId')})
				#set($col=${table.getColumnByVariableName('createUserId')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.createUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('createUser')} && ${table.getColumnByVariableName('createUser').javaTypeSimpleName} == 'Long')
				#set($col=${table.getColumnByVariableName('createUser')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.createUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#end
			#if(${table.containsColumnVariableName('createUserRealName')})
				#set($col=${table.getColumnByVariableName('createUserRealName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.createUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif( ${table.containsColumnVariableName('createUserId')})
				#set($col=${table.getColumnByVariableName('createUserId')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.createUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('createUserName')})
				#set($col=${table.getColumnByVariableName('createUserName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.createUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('createUser')})
				#set($col=${table.getColumnByVariableName('createUser')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.createUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#end
			#if(${table.containsColumnVariableName('updateUserName')})
				#set($col=${table.getColumnByVariableName('updateUserName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.updateUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif( ${table.containsColumnVariableName('updateUserId')})
				#set($col=${table.getColumnByVariableName('updateUserId')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.updateUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('updateUser')} && ${table.getColumnByVariableName('updateUser').javaTypeSimpleName} == 'Long')
				#set($col=${table.getColumnByVariableName('updateUser')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.updateUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#end
			#if(${table.containsColumnVariableName('updateUserRealName')})
				#set($col=${table.getColumnByVariableName('updateUserRealName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.updateUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif( ${table.containsColumnVariableName('updateUserId')})
				#set($col=${table.getColumnByVariableName('updateUserId')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.updateUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('updateUserName')})
				#set($col=${table.getColumnByVariableName('updateUserName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.updateUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('updateUser')})
				#set($col=${table.getColumnByVariableName('updateUser')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.updateUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#end
			#if(${table.containsColumnVariableName('crtUserName')})
				#set($col=${table.getColumnByVariableName('crtUserName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.crtUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif( ${table.containsColumnVariableName('crtUserId')})
				#set($col=${table.getColumnByVariableName('crtUserId')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.crtUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('crtUser')} && ${table.getColumnByVariableName('crtUser').javaTypeSimpleName} == 'Long')
				#set($col=${table.getColumnByVariableName('crtUser')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.crtUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#end
			#if(${table.containsColumnVariableName('crtUserRealName')})
				#set($col=${table.getColumnByVariableName('crtUserRealName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.crtUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif( ${table.containsColumnVariableName('crtUserId')})
				#set($col=${table.getColumnByVariableName('crtUserId')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.crtUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('crtUserName')})
				#set($col=${table.getColumnByVariableName('crtUserName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.crtUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('crtUser')})
				#set($col=${table.getColumnByVariableName('crtUser')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.crtUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#end
			#if(${table.containsColumnVariableName('uptUserName')})
				#set($col=${table.getColumnByVariableName('uptUserName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.uptUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif( ${table.containsColumnVariableName('uptUserId')})
				#set($col=${table.getColumnByVariableName('uptUserId')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.uptUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('uptUser')} && ${table.getColumnByVariableName('uptUser').javaTypeSimpleName} == 'Long')
				#set($col=${table.getColumnByVariableName('uptUser')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.uptUserName, "#if(${col.label})${col.label}#else${col.name}#end")
			#end
			#if(${table.containsColumnVariableName('uptUserRealName')})
				#set($col=${table.getColumnByVariableName('uptUserRealName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.uptUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif( ${table.containsColumnVariableName('uptUserId')})
				#set($col=${table.getColumnByVariableName('uptUserId')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.uptUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('uptUserName')})
				#set($col=${table.getColumnByVariableName('uptUserName')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.uptUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${table.containsColumnVariableName('uptUser')})
				#set($col=${table.getColumnByVariableName('uptUser')})
				.withColumn(${table.javaClassName}${env.entityClassSuffix}.Fields.uptUserRealName, "#if(${col.label})${col.label}#else${col.name}#end")
			#end
			;
	}

	private FileDto toFileDtoExcel(Cursor<${table.javaClassName}${env.entityClassSuffix}> cursor, ExcelConfig config) {
		String fileName = config.getFileName();
		if(Strings.isBlank(fileName) || "data".equalsIgnoreCase(fileName)){
			fileName = "#if(${table.label})$!{table.label}#else$!{table.name}#end.xlsx";
		}
		FileDto fileDto = new FileDto().withFileName(fileName);
		ExcelFileDto excel = fileDto.toExcelFile(config);
		excel.toFile(MybatisToolkit.buildVisitable(cursor, e-> Beans.newBeanMap(${table.javaClassName}${env.entityClassSuffix}.translate(e))));
		return fileDto;
	}

	private FileDto toFileDtoExcel(Cursor<${table.javaClassName}${env.entityClassSuffix}> cursor) {
		return toFileDtoExcel(cursor, defaultExcelConfig);
	}

	private FileDto toFileDtoCsv(Cursor<${table.javaClassName}${env.entityClassSuffix}> cursor, ExcelConfig config) {
		String fileName = config.getFileName();
		if(Strings.isBlank(fileName) || "data".equalsIgnoreCase(fileName)){
			fileName = "#if(${table.label})$!{table.label}#else$!{table.name}#end.csv";
		}
		FileDto fileDto = new FileDto().withFileName(fileName);
		CsvFileDto csv = fileDto.toCsvGbkFile(config);
		csv.toFile(MybatisToolkit.buildVisitable(cursor, e-> Beans.newBeanMap(${table.javaClassName}${env.entityClassSuffix}.translate(e))));
		return fileDto;
	}

	private FileDto toFileDtoCsv(Cursor<${table.javaClassName}${env.entityClassSuffix}> cursor) {
		return toFileDtoCsv(cursor, defaultExcelConfig);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto exportExcel(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder, ExcelConfig excelConfig) {
		return toFileDtoExcel(getCursor(param, orderBy, sqlBuilder), excelConfig);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto exportExcel(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		return toFileDtoExcel(getCursor(param, orderBy, sqlBuilder));
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto exportExcel(Object param, Pageable page, ExcelConfig excelConfig) {
		return exportExcel(param, page.getOrderBy(), null, excelConfig);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto exportExcel(Object param, Pageable page) {
		return exportExcel(param, page.getOrderBy(), null);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto exportCsv(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder, ExcelConfig excelConfig) {
		return toFileDtoCsv(getCursor(param, orderBy, sqlBuilder), excelConfig);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto exportCsv(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		return toFileDtoCsv(getCursor(param, orderBy, sqlBuilder));
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto exportCsv(Object param, Pageable page, ExcelConfig excelConfig) {
		return exportCsv(param, page.getOrderBy(), null, excelConfig);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto exportCsv(Object param, Pageable page) {
		return exportCsv(param, page.getOrderBy(), null);
	}


	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void importCsv(FileDto fileDto) {
		importCsv(fileDto, this.defaultExcelConfig);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void importCsv(FileDto fileDto, ExcelConfig excelConfig) {
		Consumer<Map<String, Object>> consumer = record -> {
			${table.javaClassName}${env.entityClassSuffix} entity = Beans.copyBean(record, new ${table.javaClassName}${env.entityClassSuffix}());
			insertSelective(entity);
		};
		importCsv(fileDto, excelConfig, consumer);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void importCsv(FileDto fileDto, Consumer<Map<String, Object>> consumer) {
		importCsv(fileDto, this.defaultExcelConfig, consumer);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void importCsv(FileDto fileDto, ExcelConfig excelConfig, Consumer<Map<String, Object>> consumer) {
		CsvFileDto csvFile = fileDto.toCsvGbkFile(excelConfig);
		csvFile.readData(consumer);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void importExcel(FileDto fileDto) {
		importExcel(fileDto, this.defaultExcelConfig);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void importExcel(FileDto fileDto, ExcelConfig excelConfig) {
		Consumer<Map<String, Object>> consumer = record -> {
			${table.javaClassName}${env.entityClassSuffix} entity = Beans.copyBean(record, new ${table.javaClassName}${env.entityClassSuffix}());
			insertSelective(entity);
		};
		importExcel(fileDto, this.defaultExcelConfig, consumer);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void importExcel(FileDto fileDto, Consumer<Map<String, Object>> consumer) {
		importExcel(fileDto, this.defaultExcelConfig, consumer);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void importExcel(FileDto fileDto, ExcelConfig excelConfig, Consumer<Map<String, Object>> consumer) {
		ExcelFileDto excelFile = fileDto.toExcelFile(excelConfig);
		excelFile.readData(consumer);
	}


	private int getCountBySql(Object param, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		${table.javaClassName}${env.entityClassSuffix}Sql.Select sql = ${table.javaClassName}${env.entityClassSuffix}Sql.select().selectAll();
		if (param != null) {
			sql.where().byEntity(param);
		}
		if (sqlBuilder != null) {
			SelectStatement<?> newSql = sqlBuilder.apply(sql);
			if (newSql != null) {
				return mapper.countBySql(newSql);
			}
		}
		return mapper.countBySql(sql);
	}

	/**
	 * 查询满足条件的总数
	 *
	 * @param param 查询条件对象
	 * @return 结果总数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int getCount(Object param, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		log.info("查询表[BPM_PROC_DEF_INFO]记录数.param={}", param);
		if (sqlBuilder != null) {
			return getCountBySql(param, sqlBuilder);
		}
		if (preferSqlStatement()) {
			return getCountBySql(param, sqlBuilder);
		}
		if (param instanceof ${table.javaClassName}${env.entityClassSuffix}) {
			return mapper.countEntity((${table.javaClassName}${env.entityClassSuffix}) param);
		} else if (param instanceof Map) {
			// noinspection unchecked
			return mapper.countEntityByMap((Map<String, Object>) param);
		} else {
			return getCountBySql(param, sqlBuilder);
		}
	}

	/**
	 * 查询满足条件的总数
	 *
	 * @param param 查询条件对象
	 * @return 结果总数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int getCount(Object param) {
		return getCount(param, null);
	}


	/**
	 * 查询满足条件的所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @param sqlBuilder 查询SQL扩展方法
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getList(Object param, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		return getList(param, null, sqlBuilder);
	}

	/**
	 * 查询满足条件的所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @param orderBy 排序对象
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getList(Object param, OrderBy orderBy) {
		return getList(param, orderBy, null);
	}

	/**
	 * 查询满足条件的所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getList(Object param) {
		return getList(param, null, null);
	}

	/**
	 * 查询满足条件的所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @param orderBy 排序对象
	 * @param sqlBuilder 查询SQL扩展方法
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getList(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		log.info("查询表[BPM_PROC_DEF_INFO]结果集.param={},orderBy={}", param, orderBy);
		List<${table.javaClassName}${env.entityClassSuffix}> list = getListByAny(param, orderBy, sqlBuilder);
		${table.javaClassName}${env.entityClassSuffix}.translate(list);
		return list;
	}

	private List<${table.javaClassName}${env.entityClassSuffix}> getListByAny(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		if (sqlBuilder != null) {
			return getListBySql(param, orderBy, sqlBuilder);
		}
		if (preferSqlStatement()) {
			return getListBySql(param, orderBy, null);
		}
		if (param instanceof ${table.javaClassName}${env.entityClassSuffix}) {
			return mapper.selectEntityList((${table.javaClassName}${env.entityClassSuffix}) param, orderBy);
		} else if (param instanceof Map) {
			// noinspection unchecked
			return mapper.selectEntityListByMap((Map<String, Object>) param, orderBy);
		} else {
			return getListBySql(param, orderBy, null);
		}
	}

	private List<${table.javaClassName}${env.entityClassSuffix}> getListBySql(Object param, OrderBy orderBy, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		${table.javaClassName}${env.entityClassSuffix}Sql.Select sql = ${table.javaClassName}${env.entityClassSuffix}Sql.select().selectAll();
		if (param != null) {
			sql.where().byEntity(param);
		}
		if (orderBy != null) {
			sql.orderBy(orderBy);
		}
		if (sqlBuilder != null) {
			SelectStatement<?> newSql = sqlBuilder.apply(sql);
			if (newSql != null) {
				return mapper.selectEntityListBySql(newSql);
			}
		}
		return mapper.selectEntityListBySql(sql);
	}


	/**
	 * 分页查询所有数据,返回当前页{@link Page}对象
	 *
	 * @param param 查询条件对象
	 * @param pageNum 页码
	 * @param pageSize 每页记录数
	 * @return 当前页对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public Page<${table.javaClassName}${env.entityClassSuffix}> getPage(Object param, int pageNum, int pageSize) {
		log.info("查询表[${table.name}]结果集.param={},pageNum={},pageSize={}", param, pageNum, pageSize);
		Page<${table.javaClassName}${env.entityClassSuffix}> page = PageHelper.startPage(pageNum, pageSize, false);
		List<${table.javaClassName}${env.entityClassSuffix}> list = getListByAny(param, null,null);
		if(list instanceof Page){
			page = (Page<${table.javaClassName}${env.entityClassSuffix}>) list;
		}else{
			page.addAll(list);
		}
		${table.javaClassName}${env.entityClassSuffix}.translate(list);
		int total = getCount(param);
		page.setTotal(total);
		return page;
	}

	/**
	 * 分页查询所有数据, 无分页参数时返回所有数据
	 *
	 * @param param 查询条件对象
	 * @param page 分布参数
	 * @return 当前页对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getPage(Object param, Pageable page) {
		log.info("查询表[${table.name}]结果集.param={},page={}", param, page);
		List<${table.javaClassName}${env.entityClassSuffix}> list = null;
		if (page == null) {
			list = getListByAny(param, null,null);
		} else {
			// noinspection resource
			Page<${table.javaClassName}${env.entityClassSuffix}> data = PageHelper.startPage(page.getPageNum(), page.getPageSize(), true)
				.doSelectPage(() -> getListByAny(param, page.getOrderBy(),null));
			page.setTotal((int) data.getTotal());
			list = data;
		}
		${table.javaClassName}${env.entityClassSuffix}.translate(list);
		return list;
	}


	/**
	 * 查询满足条件的不超过数据量上限的所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getLimitedList(Object param, int maxCount) {
		log.info("查询表[${table.name}]结果集.param={},maxCount={}", param, maxCount);
		// noinspection resource
		List<${table.javaClassName}${env.entityClassSuffix}> list = PageHelper.startPage(1, maxCount, false)
			.doSelectPage(() -> getListByAny(param, null, null));
		${table.javaClassName}${env.entityClassSuffix}.translate(list);
		return list;
	}


	/**
	 * 分页查询所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @param pageIndex 页码
	 * @param pageSize 每页记录数
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getList(Object param, int pageIndex, int pageSize) {
		log.info("查询表[${table.name}]结果集.param={},pageIndex={},pageSize={}", param, pageIndex, pageSize);
		// noinspection resource
		List<${table.javaClassName}${env.entityClassSuffix}> list = PageHelper.startPage(pageIndex, pageSize, false)
			.doSelectPage(() -> getListByAny(param, null, null));
		${table.javaClassName}${env.entityClassSuffix}.translate(list);
		return list;
	}

	/**
	 * 新增一条记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int insertEntire(Object entity) {
		${table.javaClassName}${env.entityClassSuffix} target = entity instanceof ${table.javaClassName}${env.entityClassSuffix} ?
			(${table.javaClassName}${env.entityClassSuffix}) entity
			: Beans.copyBean(entity, new ${table.javaClassName}${env.entityClassSuffix}());
		return insertEntire(target);
	}

	/**
	 * 新增一条记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int insertEntire(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("新增表[${table.name}]记录.entity={}", entity);
		fillCreatable(entity);
		Validations.validate(entity, Create.class);
		return mapper.insertEntity(entity, true);
	}

	/**
	 * 新增一条记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int insertSelective(Object entity) {
		${table.javaClassName}${env.entityClassSuffix} target = entity instanceof ${table.javaClassName}${env.entityClassSuffix} ?
			(${table.javaClassName}${env.entityClassSuffix}) entity
			: Beans.copyBean(entity, new ${table.javaClassName}${env.entityClassSuffix}());
		return insertSelective(target);
	}

	/**
	 * 新增一条记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int insertSelective(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("新增表[${table.name}]记录.entity={}", entity);
		fillCreatable(entity);
		Validations.validate(entity, Create.class);
		return mapper.insertEntity(entity);
	}

	private void fillCreatable(${table.javaClassName}${env.entityClassSuffix} entity){
		// 新增操作前补充新增字段值信息：主键、创建时间、创建用户、更新时间、更新用户等
		AppSessions.fillCreatable(entity);
		// TODO 主键填充逻辑
	}

	/**
	 * 根据主键列，删除一条记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int delete(Object entity) {
		${table.javaClassName}${env.entityClassSuffix} target = entity instanceof ${table.javaClassName}${env.entityClassSuffix} ?
			(${table.javaClassName}${env.entityClassSuffix}) entity
			: Beans.copyBean(entity, new ${table.javaClassName}${env.entityClassSuffix}());
		return delete(target);
	}

	/**
	 * 根据主键列，删除一条记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int delete(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("根据主键删除表[${table.name}]记录.entity={}", entity);
		Validations.validate(entity, Delete.class);
		return mapper.deleteEntityById(entity);
	}

	/**
	 * 根据主键列，修改一条记录,按入参修改所有列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int updateEntire(Object entity) {
		${table.javaClassName}${env.entityClassSuffix} target = entity instanceof ${table.javaClassName}${env.entityClassSuffix} ?
			(${table.javaClassName}${env.entityClassSuffix}) entity
			: Beans.copyBean(entity, new ${table.javaClassName}${env.entityClassSuffix}());
		return updateEntire(target);
	}

	/**
	 * 根据主键列，修改一条记录,按入参修改所有列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int updateEntire(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("根据主键更新表[${table.name}]记录.entity={}", entity);
		fillUpdatable(entity);
		Validations.validate(entity, UpdateEntire.class);
		return mapper.updateEntityById(entity, true);
	}

	/**
	 * 根据主键列，修改一条记录,只修改入参的非空字段对应的列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int updateSelective(Object entity) {
		${table.javaClassName}${env.entityClassSuffix} target = entity instanceof ${table.javaClassName}${env.entityClassSuffix} ?
			(${table.javaClassName}${env.entityClassSuffix}) entity
			: Beans.copyBean(entity, new ${table.javaClassName}${env.entityClassSuffix}());
		return updateSelective(target);
	}

	/**
	 * 根据主键列，修改一条记录,只修改入参的非空字段对应的列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int updateSelective(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("根据主键更新表[${table.name}]记录.entity={}", entity);
		fillUpdatable(entity);
		Validations.validate(entity, Update.class);
		return mapper.updateEntityById(entity);
	}

	private void fillUpdatable(${table.javaClassName}${env.entityClassSuffix} entity){
		// 修改操作前补充字段值信息：更新时间、更新用户等
		AppSessions.fillUpdatable(entity);
	}

	/**
	 * 根据主键列查询对象
	 *
	 * @param param 查询条件对象
	 * @return 结果对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public ${table.javaClassName}${env.entityClassSuffix} getById(Object param) {
		${table.javaClassName}${env.entityClassSuffix} target = param instanceof ${table.javaClassName}${env.entityClassSuffix} ?
			(${table.javaClassName}${env.entityClassSuffix}) param
			: Beans.copyBean(param, new ${table.javaClassName}${env.entityClassSuffix}());
		return getById(target);
	}

	/**
	 * 根据主键列查询对象
	 *
	 * @param param 查询条件对象
	 * @return 结果对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public ${table.javaClassName}${env.entityClassSuffix} getById(${table.javaClassName}${env.entityClassSuffix} param) {
		log.info("根据主键查询表[${table.name}]记录.param={}", param);
		Validations.validate(param, Retrieve.class);
		${table.javaClassName}${env.entityClassSuffix} entity =  mapper.selectEntityById(param);
		${table.javaClassName}${env.entityClassSuffix}.translate(entity);
		return entity;
	}

	/**
	 * 根据条件查询唯一结果
	 *
	 * @param param 查询条件对象
	 * @return 唯一结果对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public ${table.javaClassName}${env.entityClassSuffix} getUnique(${table.javaClassName}${env.entityClassSuffix} param) {
		log.info("根据主键查询表[${table.name}]记录.param={}", param);
		${table.javaClassName}${env.entityClassSuffix} entity =  getUniqueByAny(param, null);
		${table.javaClassName}${env.entityClassSuffix}.translate(entity);
		return entity;
	}

	/**
	 * 根据条件查询唯一结果
	 *
	 * @param param 查询条件对象
	 * @param sqlBuilder 查询SQL扩展方法
	 * @return 唯一结果对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public ${table.javaClassName}${env.entityClassSuffix} getUnique(Object param, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		log.info("根据主键查询表[BPM_PROC_DEF_INFO]记录.param={}", param);
		${table.javaClassName}${env.entityClassSuffix} entity = getUniqueByAny(param, sqlBuilder);
		${table.javaClassName}${env.entityClassSuffix}.translate(entity);
		return entity;
	}

	private ${table.javaClassName}${env.entityClassSuffix} getUniqueByAny(Object param, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		if (sqlBuilder != null) {
			return getUniqueBySql(param, sqlBuilder);
		}
		if (preferSqlStatement()) {
			return getUniqueBySql(param, null);
		}
		if (param instanceof ${table.javaClassName}${env.entityClassSuffix}) {
			return mapper.selectEntity((${table.javaClassName}${env.entityClassSuffix}) param);
		} else if (param instanceof Map) {
			// noinspection unchecked
			return mapper.selectEntityByMap((Map<String, Object>) param);
		} else {
			return getUniqueBySql(param, null);
		}
	}

	private ${table.javaClassName}${env.entityClassSuffix} getUniqueBySql(Object param, Function<${table.javaClassName}${env.entityClassSuffix}Sql.Select, SelectStatement<?>> sqlBuilder) {
		${table.javaClassName}${env.entityClassSuffix}Sql.Select sql = ${table.javaClassName}${env.entityClassSuffix}Sql.select().selectAll();
		if (param != null) {
			sql.where().byEntity(param);
		}
		if (sqlBuilder != null) {
			SelectStatement<?> newSql = sqlBuilder.apply(sql);
			if (newSql != null) {
				return mapper.selectEntityBySql(newSql);
			}
		}
		return mapper.selectEntityBySql(sql);
	}

}
