#parse("/vm/include.vm")
package ${pkgPrefixFacade}${env.modelPackage.replace('/','.')};

import java.io.Serializable;
#foreach($name in $table.columnJavaTypes)
import $name;
#end

import javax.validation.ConstraintValidatorContext;
import javax.validation.Valid;
import javax.validation.constraints.*;

import io.polaris.validation.*;
import io.polaris.validation.group.*;
import io.swagger.v3.oas.annotations.media.Schema;

import lombok.*;
import lombok.experimental.Accessors;
import lombok.experimental.FieldNameConstants;

import io.polaris.framework.core.context.domain.ExchangeDto;
import io.polaris.framework.core.data.consts.Dml;
import io.polaris.framework.core.fs.domain.FileDto;

import ${pkgPrefix}${env.entityPackage.replace('/','.')}.${table.javaClassName}${env.entityClassSuffix};

/**
 * $!{table.name}
 * $!{table.comment}
 * @author $!{env.author}
## * @since ${current.date}
 */
@Data
@FieldNameConstants
@CustomValidated(${table.javaClassName}${env.rpcDmlInputClassSuffix}.Validator.class)
public class ${table.javaClassName}${env.rpcDmlInputClassSuffix} extends ExchangeDto {

	@Schema(description = "操作类型")
	@NotNull(message = "操作类型[type]不能为空")
	private Dml type;
	@Valid
	@Schema(description = "实体参数")
	private ${table.javaClassName}${env.entityClassSuffix} entity;
#if(${env.rpcImportable} == "true")
	@Schema(description = "Csv数据文件")
	private FileDto csvFile;
	@Schema(description = "Excel数据文件")
	private FileDto excelFile;
#end

	public static class Validator implements CustomValidation {
		@Override
		public boolean isValid(ConstraintValidatorContext context, Object value, String... arguments) {
			${table.javaClassName}${env.rpcDmlInputClassSuffix} o = (${table.javaClassName}${env.rpcDmlInputClassSuffix}) value;
			if (Dml.INSERT == o.getType() || Dml.UPDATE == o.getType() || Dml.DELETE == o.getType()) {
				if (o.getEntity() == null) {
					context.disableDefaultConstraintViolation();
					context.buildConstraintViolationWithTemplate("实体参数[entity]不能为空")
						.addPropertyNode(Fields.entity)
						.addConstraintViolation()
					;
					return false;
				}
			} else if (Dml.IMPORT == o.getType()) {
#if(${env.rpcImportable} == "true")
				if (o.csvFile == null && o.excelFile == null) {
					context.disableDefaultConstraintViolation();
					context.buildConstraintViolationWithTemplate("数据文件参数[csvFile或excelFile]不能为空")
						.addPropertyNode(Fields.csvFile)
						.addConstraintViolation()
					;
					return false;
				}
#else
				context.disableDefaultConstraintViolation();
				context.buildConstraintViolationWithTemplate("操作类型[type]不支持导入操作")
					.addPropertyNode(Fields.type)
					.addConstraintViolation()
				;
				return false;
#end
			}
			return true;
		}
	}
}
