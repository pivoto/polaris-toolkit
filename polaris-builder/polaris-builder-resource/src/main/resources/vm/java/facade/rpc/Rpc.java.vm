#parse("/vm/include.vm")
package ${pkgPrefixFacade}${env.rpcPackage.replace('/','.')};

import java.util.*;

import javax.validation.Valid;

import io.polaris.core.assertion.Arguments;
import io.polaris.core.assertion.Assertions;
import io.polaris.core.jdbc.sql.query.OrderBy;
import io.polaris.core.jdbc.sql.query.Queries;
import io.polaris.core.jdbc.sql.query.Pageable;
import io.polaris.core.lang.bean.Beans;
import io.polaris.core.lang.bean.IBeanMap;

import lombok.extern.slf4j.Slf4j;

import io.polaris.framework.core.consts.Bool;
import io.polaris.framework.core.context.domain.ExchangeDto;
import io.polaris.framework.core.context.domain.support.FileExchangeDto;
import io.polaris.framework.core.data.consts.Dml;
import io.polaris.framework.core.data.domain.Page;
import io.polaris.framework.core.data.domain.QueryDto;
import io.polaris.framework.core.fs.domain.FileDto;
import io.polaris.framework.core.rpc.annotation.RpcService;
import io.polaris.framework.core.rpc.oas.annotation.OpenApi;
import io.polaris.framework.infra.annotation.SessionRequired;
import io.polaris.framework.infra.session.AppSessions;

import org.springframework.util.Assert;

import ${pkgPrefix}${env.entityPackage.replace('/','.')}.${table.javaClassName}${env.entityClassSuffix};
import ${pkgPrefix}${env.servicePackage.replace('/','.')}.${table.javaClassName}${env.serviceClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcDmlInputClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcGetInputClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcListInputClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcGetOutputClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcListOutputClassSuffix};

/**
 * $!{table.name}
 * $!{table.comment}
 * @author $!{env.author}
## * @since ${current.date}
 */
@Slf4j
@RpcService
public class ${table.javaClassName}${env.rpcClassSuffix}{

	private final ${table.javaClassName}${env.serviceClassSuffix} ${table.javaVariableName}${env.serviceClassSuffix};

	public ${table.javaClassName}${env.rpcClassSuffix}(${table.javaClassName}${env.serviceClassSuffix} ${table.javaVariableName}${env.serviceClassSuffix}) {
		this.${table.javaVariableName}${env.serviceClassSuffix} = ${table.javaVariableName}${env.serviceClassSuffix};
	}

	@SessionRequired
	@RpcService(active = Bool.FALSE, code = "$!{env.rpcCodePrefix}${table.javaClassName}Dml", name = "$!{table.label}数据操作")
	@OpenApi(inputSchema = ${table.javaClassName}${env.rpcDmlInputClassSuffix}.class, outputSchema = ExchangeDto.class)
	public ExchangeDto do$!{env.rpcCodePrefix}${table.javaClassName}Dml(@Valid ${table.javaClassName}${env.rpcDmlInputClassSuffix} input) {
		Arguments.notNull(input.getType(), "操作类型不能为空");
		Dml type = input.getType();
		${table.javaClassName}${env.entityClassSuffix} entity = input.getEntity();
		switch (type) {
			case INSERT: {
				${table.javaVariableName}${env.serviceClassSuffix}.insertSelective(entity);
				break;
			}
			case UPDATE: {
				${table.javaVariableName}${env.serviceClassSuffix}.updateSelective(entity);
				break;
			}
			case DELETE: {
				${table.javaVariableName}${env.serviceClassSuffix}.delete(entity);
				break;
			}
			case IMPORT: {
				FileDto csvFile = input.getCsvFile();
				FileDto excelFile = input.getExcelFile();
				if (csvFile != null) {
					${table.javaVariableName}${env.serviceClassSuffix}.importCsv(csvFile);
				} else if (excelFile != null){
					${table.javaVariableName}${env.serviceClassSuffix}.importExcel(excelFile);
				} else {
					throw new IllegalArgumentException("数据文件不能为空");
				}
				break;
			}
			default: // ignore
		}
		return new ExchangeDto();
	}

	@SessionRequired
	@RpcService(active = Bool.FALSE, code = "$!{env.rpcCodePrefix}${table.javaClassName}Get", name = "$!{table.label}单行数据查询")
	@OpenApi(inputSchema = ${table.javaClassName}${env.rpcGetInputClassSuffix}.class, outputSchema = ${table.javaClassName}${env.rpcGetOutputClassSuffix}.class)
	public ${table.javaClassName}${env.rpcGetOutputClassSuffix} do$!{env.rpcCodePrefix}${table.javaClassName}Get(@Valid ${table.javaClassName}${env.rpcGetInputClassSuffix} input) {
		${table.javaClassName}${env.entityClassSuffix} entity = ${table.javaVariableName}${env.serviceClassSuffix}.getUnique(
			Beans.copyBean(input.getParam(), new ${table.javaClassName}${env.entityClassSuffix}())
		);
		${table.javaClassName}${env.rpcGetOutputClassSuffix} output = new ${table.javaClassName}${env.rpcGetOutputClassSuffix}();
		output.setEntity(entity);
		return output;
	}

	@SessionRequired
	@RpcService(active = Bool.FALSE, code = "$!{env.rpcCodePrefix}${table.javaClassName}List", name = "$!{table.label}列表数据查询")
	@OpenApi(inputSchema = ${table.javaClassName}${env.rpcListInputClassSuffix}.class, outputSchema = ${table.javaClassName}${env.rpcListOutputClassSuffix}.class)
	public ${table.javaClassName}${env.rpcListOutputClassSuffix} do$!{env.rpcCodePrefix}${table.javaClassName}List(@Valid ${table.javaClassName}${env.rpcListInputClassSuffix} input) {
		${table.javaClassName}${env.rpcListOutputClassSuffix} output = new ${table.javaClassName}${env.rpcListOutputClassSuffix}();
		Page page = input.getPage();
		Map<String, Object> param = Beans.newBeanMap(input.getParam());
		if (page.getOrderBy()==null) {
			OrderBy orderBy = Queries.newOrderBy(input.getSqlOrderBy());
			page.setOrderBy(orderBy);
		}
		List<${table.javaClassName}${env.entityClassSuffix}> list = ${table.javaVariableName}${env.serviceClassSuffix}.getPage(param, page);
		output.setPage(page);
		output.setList(list);
		return output;
	}

}

