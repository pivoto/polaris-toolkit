#parse("/vm/include.vm")
<template>
	<div ref="refDiv">
		<v-query-panel title="查询区">
			<el-form ref="refForm" :model="vQueryForm.queryForm" :rules="vQueryForm.queryFormRules" label-width="100px" class="">
				<v-row class="mb10">
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
					<v-col-form-item type="datetimerange" label="${col.label}" prop="${col.javaVariableName}" v-model="vQueryForm.queryForm.${col.javaVariableName}"
						clearable item-style="width: 200px;" :date-props="{rangeSeparator:'~',startPlaceholder:'起始时间',endPlaceholder:'截止时间'}" />
	#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
					<v-col-form-item type="number" label="${col.label}" prop="${col.javaVariableName}" v-model="vQueryForm.queryForm.${col.javaVariableName}"
						clearable item-style="width: 200px;" :number-props="{precision:0}" />
	#elseif(${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
					<v-col-form-item type="number" label="${col.label}" prop="${col.javaVariableName}" v-model="vQueryForm.queryForm.${col.javaVariableName}"
						clearable item-style="width: 200px;" :number-props="{precision:${col.decimalDigits}}" />
	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' )
					<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vQueryForm.queryForm.${col.javaVariableName}"
						clearable item-style="width: 180px;" />
	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
					<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vQueryForm.queryForm.${col.javaVariableName}"
						clearable item-style="width: 180px;" />
	#else
		#if(${col.name.toLowerCase().endsWith('_sts')})
					<v-col-form-item type="select" label="${col.label}" prop="${col.javaVariableName}" v-model="vQueryForm.queryForm.${col.javaVariableName}"
						clearable item-style="width: 200px;"
						:data="[{value:'A',label:'生效',tag:{effect:'dark'}},{value:'I',label:'失效',tag:{effect:'dark',type:'danger'}}]" />
		#else
					<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vQueryForm.queryForm.${col.javaVariableName}"
						clearable item-style="width: 180px;" />
		#end
	#end
#end
				</v-row>
				<v-row>
					<v-col>
						<!-- @formatter:off -->
						<el-button type="primary" @click="doQuery()"><el-icon><EleSearch/></el-icon>查询</el-button>
						<el-button type="primary" @click="doClear()"><el-icon><EleRefresh/></el-icon>重置</el-button>
						<!--<el-button type="primary" @click="onOpenAddDialog()"><el-icon><EleFolderAdd/></el-icon>新增</el-button>-->
						<!-- @formatter:on -->
					</v-col>
				</v-row>
			</el-form>
		</v-query-panel>
		<v-table-panel title="数据集" :loading="vLoadingTable"
			:records="vTableRecords.rows" :total="vTableRecords.total"
			:empty-text="vQueryForm.queryFormCache?'':'请输入条件并查询数据'"
			v-model:page-num="vTablePage.pageIdx"
			v-model:page-size="vTablePage.pageSize"
			@refresh="onTableRefresh"
			@update:current="onUpdateCurrentRow"
			@update:sort="onUpdateSortField"
		>
			<template #bar>
				<el-button-group>
				<el-button v-auth="'view'" size="small" type="primary" icon="EleView" @click="onOpenViewDialog()">查看</el-button>
				<el-button v-auth="'add'" size="small" type="primary" icon="EleDocumentAdd" @click="onOpenAddDialog()">新增</el-button>
				<el-button v-auth="'edit'" size="small" type="primary" icon="EleEdit" @click="onOpenEditDialog()">修改</el-button>
				<el-button v-auth="'delete'" size="small" type="primary" icon="EleDelete" @click="onDeleteRecord()">删除</el-button>
				<el-button v-auth="'export'" size="small" type="primary" icon="EleDownload" @click="onExportRecord(true)">导出Csv</el-button>
				<el-button v-auth="'export'" size="small" type="primary" icon="EleDownload" @click="onExportRecord(false)">导出Excel</el-button>
				<el-button v-auth="'import'" size="small" type="primary" icon="EleUpload" @click="onOpenImportDialog()">导入</el-button>
				</el-button-group>
			</template>
			<template #default>
				<v-table-col type="index" label="序号" width="50"/>
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
				<v-table-col prop="${col.javaVariableName}" label="${col.label}" align="center" format-time />
	#else
		#if(${col.name.toLowerCase().endsWith('_sts')})
				<v-table-col prop="${col.javaVariableName}" label="${col.label}" align="center"
					:dict="[{value:'A',label:'生效',tag:{effect:'dark'}},{value:'I',label:'失效',tag:{effect:'dark',type:'danger'}}]" />
		#elseif(${col.javaVariableName.equals('crtUserId')} )
			#if(!$table.containsColumnVariableName('crtUserName'))
				<v-table-col prop="${col.javaVariableName}" label="${col.label}" align="center" format-user="crtUserName" />
			#end
		#elseif(${col.javaVariableName.equals('crtUser')} && ${col.javaTypeSimpleName} == 'Long')
			#if(!$table.containsColumnVariableName('crtUserName'))
				<v-table-col prop="${col.javaVariableName}" label="${col.label}" align="center" format-user="crtUserName" />
			#end
		#elseif(${col.javaVariableName.equals('uptUserId')})
			#if(!$table.containsColumnVariableName('uptUserName'))
				<v-table-col prop="${col.javaVariableName}" label="${col.label}" align="center" format-user="uptUserName" />
			#end
		#elseif(${col.javaVariableName.equals('uptUser')} && ${col.javaTypeSimpleName} == 'Long')
			#if(!$table.containsColumnVariableName('uptUserName'))
				<v-table-col prop="${col.javaVariableName}" label="${col.label}" align="center" format-user="uptUserName" />
			#end
		#else
				<v-table-col prop="${col.javaVariableName}" label="${col.label}" />
		#end
	#end
#end
				<!--<el-table-column label="操作" width="200" align="center">
					<template #default="scope">
						<el-button v-auth="'view'" size="small" plain @click="onOpenViewDialog(scope.row)">查看</el-button>
						<el-button v-auth="'edit'" size="small" plain @click="onOpenEditDialog(scope.row)">修改</el-button>
						<el-button v-auth="'delete'" size="small" plain @click="onDeleteRecord(scope.row)">删除</el-button>
					</template>
				</el-table-column>-->
			</template>
		</v-table-panel>

		<Add${table.javaClassName} ref="refAddDialog" v-model:show="vShowAddDialog" @after-submit="onTableRefresh"/>
		<Edit${table.javaClassName} ref="refEditDialog" :readonly="vTableRecords.editReadonly"
			:data="vTableRecords.editParam" v-model:show="vShowEditDialog" @after-submit="onTableRefresh"/>
		<v-dialog width="500px" ref="refImportDialog" v-model="vShowImportDialog" :title="'数据导入'">
			<el-form ref="refImportForm" :rules="vImportForm.importFormRules" :model="vImportForm.importForm" label-width="90px">
				<v-row :gutter="5">
					<v-col>
						<el-form-item label="文件上传" prop="fileList">
							<el-upload ref="refImportUploader" style="width:300px;" name="dataFile" limit="1" accept=".csv,.xlsx" :auto-upload="false" show-file-list v-model:file-list="vImportForm.importForm.fileList">
								<template #trigger>
									<el-button type="primary" @click=""><el-icon><EleUploadFilled/></el-icon>选择</el-button>
								</template>
								<template #tip>
									<span>(*.csv/*.xlsx)</span>
								</template>
							</el-upload>
						</el-form-item>
					</v-col>
				</v-row>
			</el-form>
			<template #footer>
				<div class="dialog-footer">
					<el-button icon="EleCircleCheckFilled" type="primary" @click="onImportRecord()">上传</el-button>
					<el-button icon="EleCircleCloseFilled" type="primary" @click="onCancelImportRecord()">取消</el-button>
				</div>
			</template>
		</v-dialog>
	</div>
</template>
<script lang="ts">
export default {
	name: "List${table.javaClassName}"
}
</script>
<script setup lang="ts">
import {
	computed, watch, provide, inject, nextTick,
	defineComponent, getCurrentInstance,
	onMounted, onActivated, onDeactivated, onUnmounted,
	reactive, ref, shallowReactive, shallowRef, toRefs, unref
} from "vue";
import type {
	ExtractPropTypes,PropType,ShallowRef,Ref,ComputedRef,ShallowReactive,
	ComponentInternalInstance,ComponentPublicInstance
} from 'vue';
import type {TableColumnCtx} from 'element-plus';
import type {FormInstance, FormRules} from 'element-plus';
import type {UploadInstance,UploadProps, UploadUserFile } from 'element-plus'
import type {RuleItem, ValidateError, ValidateFieldsError} from 'async-validator';

import VDialog from '/@/components/page/VDialog.vue';
import VQueryPanel from '/@/components/page/VQueryPanel.vue';
import VTablePanel from '/@/components/page/VTablePanel.vue';
import VRow from '/@/components/page/VRow.vue';
import VCol from '/@/components/page/VCol.vue';
import VColFormItem from '/@/components/page/VColFormItem.vue';
import VTableCol from '/@/components/page/VTableCol.vue';
import SvgIcon from "/@/components/icon/SvgIcon.vue";

import Add${table.javaClassName} from './Add${table.javaClassName}.vue';
import Edit${table.javaClassName} from './Edit${table.javaClassName}.vue';
import msg from "/@/common/core/msg";
import * as validation from "/@/common/core/validation";
import {formatDate} from "/@/common/core/date";
import {apix,post,postx} from "/@/common/api";
import {PromiseResult} from "/@/common/core/utils";
import ApiOutput from "/@/common/api/ApiOutput";


type EntityType = {
#foreach($col in $table.pkColumns)
#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
	${col.javaVariableName}#if(${col.nullable})?#end: string,
#elseif(${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
	${col.javaVariableName}#if(${col.nullable})?#end: string,
#else
	${col.javaVariableName}#if(${col.nullable})?#end: string,
#end
#end
}
interface FormType extends Partial<Omit<EntityType,'crtDt'|'uptDt'>> {
	[key:string]: any,
}
interface ImportFormType {
	fileList: UploadUserFile[],
}

const Fields = {
#foreach($col in $table.columns)
	${col.javaVariableName}: '${col.label}',
#end
};
const FieldsLike = {
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'VARCHAR' || ${col.jdbcType} == 'CHAR')
	${col.javaVariableName}: '${col.label}',
	#end
#end
};
const refDiv = shallowRef<HTMLElement>();
const refForm = ref<FormInstance>() as Ref<FormInstance>;
const refImportForm = ref<FormInstance>() as Ref<FormInstance>;
const refImportUploader = ref<UploadInstance>() as Ref<UploadInstance>;
const refAddDialog = ref() as Ref<InstanceType<typeof Add${table.javaClassName}>>;
const refEditDialog = ref() as Ref<InstanceType<typeof Edit${table.javaClassName}>>;
const vLoadingTable = ref(false);
const vShowImportDialog = ref(false);
const vShowAddDialog = ref(false);
const vShowEditDialog = ref(false);
const vTablePage = ref<{
		pageIdx: number,
		pageSize: number,
	}>({
		pageSize: 20,
		pageIdx: 1,
	});
const vTableRecords = ref<{
		total: number,
		rows: EntityType[],
		currentRow?: EntityType,
		editParam: any,
		editReadonly: boolean,
	}>({
		total: 0,
		rows: [],
		editParam:{},
		editReadonly:true,
	});
const vQueryForm = ref<{
		queryFormCache?: FormType,
		queryFormInit: FormType,
		queryForm: FormType,
		queryFormRules: FormRules<FormType>,
		queryOrderBy?: string,
	}>({
		queryFormInit: {},
		queryForm: {},
		queryFormRules: {},
	});
const vImportForm = ref<{
	importForm: ImportFormType,
	importFormRules: FormRules<ImportFormType>,
	}>({
		importForm: {
			fileList: []
		},
		importFormRules:{}
	});

// validators
{
	function buildNumberValidator():RuleItem{
		return {
			validator: (rule, value, callback) => {
				if (value != null && !/^\d*$/.test(value)) {
					return new Error('必须是数值格式');
				}
				callback();
			}
		};
	}
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT' || ${col.jdbcType} == 'BIGINT' || ${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' || ${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
	vQueryForm.value.queryFormRules.${col.javaVariableName} = [buildNumberValidator()];
	#end
#end
}
watch(() => vTablePage.value, () => {
	doFetchData();
}, {deep: true})

function doClear() {
	vQueryForm.value.queryForm = {...vQueryForm.value.queryFormInit}
}

function doQuery() {
	// if (!vQueryForm.value.queryForm.tenantId) {
	// 	msg.message('请选择租户', 'error')
	// 	return;
	// }
	validation.validateForm(refForm.value, Fields, async ()=>{
		vTablePage.value.pageIdx = 1
		vQueryForm.value.queryFormCache = {
			...vQueryForm.value.queryForm
		};
		doFetchData();
	});
}

// 调用接口查询
async function doFetchData() {
	let queryFormCache = vQueryForm.value.queryFormCache;
	if (!queryFormCache) {
		return;
	}
	vLoadingTable.value = true;
	try {
		vTableRecords.value.rows = [];
		let input = {
			param: {
				...vQueryForm.value.queryFormCache,
			},
			page: {
				pageIdx: vTablePage.value.pageIdx,
				pageSize: vTablePage.value.pageSize,
				orderBy: vQueryForm.value.queryOrderBy,
			}
		}
		for (let key in FieldsLike) {
			if (input.param[key]) {
				input.param[key] = input.param[key].replace(/^%*|%*$/g, '%');
			}
		}
		//let rs = await mockTableData(input.page.pageIdx, input.page.pageSize);
		let rs = await apix({
			method: 'post',
			url: '/api/$!{env.rpcCodePrefix}${table.javaClassName}List',
			headers: {},
			data: input
		});
		console.log(rs.output, rs.error)
		if (rs.hasError()) {
			msg.error(rs.getErrMessage() || '查询失败！')
			return;
		}
		let output = rs.output;
		vTableRecords.value.rows = output.list;
		vTableRecords.value.total = output.page.recordSize || output.list.length;
		vTablePage.value.pageIdx = output.page?.pageNum || vTablePage.value.pageIdx
		vTablePage.value.pageSize = output.page?.pageSize || vTablePage.value.pageSize
	} finally {
		vLoadingTable.value = false;
	}
}

// 刷新查询结果
function onTableRefresh() {
	doFetchData()
}

// 更新排序字段
function onUpdateSortField(sortFields: string) {
	console.log('update sort field:', sortFields)
	vQueryForm.value.queryOrderBy = sortFields
	doFetchData()
}

// 更新选择记录行
function onUpdateCurrentRow(currentRow: any, oldCurrentRow: any) {
	console.log('update current row:', currentRow, oldCurrentRow)
	vTableRecords.value.currentRow = currentRow;
}

// 格式化日期字段
function tableColumnFormatTime(row: any, column: TableColumnCtx<any>, cellValue: any, index: any) {
	return cellValue && formatDate(new Date(cellValue), 'yyyy-MM-dd HH:mm:ss.SSS')
}
function tableColumnFormatCrtUser(row: any, column: TableColumnCtx<any>, cellValue: any, index: any) {
	return row.crtUserName || cellValue && (cellValue=='0'?'(SYS)':'('+cellValue+')');
}
function tableColumnFormatUptUser(row: any, column: TableColumnCtx<any>, cellValue: any, index: any) {
	return row.uptUserName || cellValue && (cellValue=='0'?'(SYS)':'('+cellValue+')');
}


// 打开新增弹窗
function onOpenAddDialog() {
	vShowAddDialog.value = true;
}
// 打开查看弹窗
function onOpenViewDialog(row?: any){
	row = row || vTableRecords.value.currentRow
	if (!row){
		msg.error('请选择数据行')
		return;
	}
	vTableRecords.value.editReadonly = true;
	vTableRecords.value.editParam = {
		... row
	}
	vShowEditDialog.value = true;
}
// 打开修改弹窗
function onOpenEditDialog(row?: any){
	row = row || vTableRecords.value.currentRow
	if (!row){
		msg.error('请选择数据行')
		return;
	}
	vTableRecords.value.editReadonly = false;
	vTableRecords.value.editParam = {
		... row
	}
	vShowEditDialog.value = true;
}
// 打开导入弹窗
function onOpenImportDialog() {
	vShowImportDialog.value = true;
}
// 删除数据
function onDeleteRecord(row?: any){
	row = row || vTableRecords.value.currentRow
	if (!row){
		msg.error('请选择数据行')
		return;
	}
	msg.confirm(`确认删除所选记录，是否继续?`,'提示','warning')
		.then(async (d)=>{
			console.log(d)
			//let rs = await mockSubmitData();
			let rs = await apix({
				method: 'post',
				url: '/api/$!{env.rpcCodePrefix}${table.javaClassName}Dml',
				headers: {},
				data: {
					type: 'DELETE',
					entity: row
				}
			});
			console.log(rs.output, rs.error)
			if (rs.hasError()) {
				msg.error(rs.getErrMessage() || '数据删除失败！')
				return;
			}
			msg.success('数据删除成功');
			onTableRefresh();
		}).catch((e)=>{
			if (e == 'cancel' || e == 'close'){
				console.warn(e)
				msg.warn('取消数据删除操作')
			}else{
				console.error(e)
				msg.error('数据删除失败：'+e);
			}
		})
}
// 导出数据
function onExportRecord(useCsv?: boolean){
	let queryFormCache = vQueryForm.value.queryFormCache;
	if (!queryFormCache) {
		msg.warn('缺少查询条件！请先做查询操作');
		return;
	}

	msg.confirm(`确认导出所有记录，是否继续?`,'提示','warning')
		.then(async (d)=>{
			vLoadingTable.value = true;
			try {
				let input = {
					param: {
						...vQueryForm.value.queryFormCache,
					},
					page: {
						pageIdx: vTablePage.value.pageIdx,
						pageSize: vTablePage.value.pageSize,
						orderBy: vQueryForm.value.queryOrderBy,
					}
				}
				let rs = await apix({
					method: 'post',
					url: useCsv? '/api/$!{env.rpcCodePrefix}${table.javaClassName}ExportCsv':'/api/$!{env.rpcCodePrefix}${table.javaClassName}ExportExcel',
					headers: {},
					data: input
				});
				console.log(rs.output, rs.error)
				if (rs.hasError()) {
					msg.error(rs.getErrMessage() || '查询导出失败！')
					return;
				}
				let output = rs.output;
				let cmisDownload = output.cmis_download;
				if (cmisDownload && cmisDownload.fileurl){
					if (cmisDownload.filename){
						msg.success('请下载导出结果文件：'+cmisDownload.filename);
					}
					window.open(cmisDownload.fileurl)
				}else{
					msg.warn('无结果文件，请确认导出接口是否正确！')
				}
			} finally {
				vLoadingTable.value = false;
			}
		}).catch((e)=>{
			if (e == 'cancel' || e == 'close'){
				console.warn(e)
				msg.warn('取消导出操作')
			}else{
				console.error(e)
				msg.error('导出操作失败：'+e);
			}
	})
}
// 取消导入数据
function onCancelImportRecord() {
	vShowImportDialog.value = false;
	refImportUploader.value.clearFiles();
}
// 导入数据
function onImportRecord() {
	let fileList = vImportForm.value.importForm.fileList;
	if (fileList?.length != 1){
		msg.error('数据文件不存在，请选择上传指定格式的数据文件！');
		return;
	}
	let file = fileList[0];
	if (!file.name.endsWith('.csv') && !file.name.endsWith('.xlsx')){
		msg.error('数据文件格式不正确，请选择上传指定格式的数据文件！');
		return;
	}
	msg.confirm(`确认导入指定的数据文件，是否继续?`,'提示','warning')
		.then(async (d)=>{
			console.log(d)
			let formData = new FormData();
			formData.append('type', 'IMPORT');
			if (file.name.endsWith('.csv')){
				formData.append('csvFile', file.raw);
			}else if(file.name.endsWith('.xlsx')){
				formData.append('excelFile', file.raw);
			}
			// 调用接口上传
			let rs = await apix({
				method: 'post',
				url: '/api/$!{env.rpcCodePrefix}${table.javaClassName}Dml',
				headers: {},
				data: formData
			});
			console.log(rs.output, rs.error)
			if (rs.hasError()) {
				msg.error(rs.getErrMessage() || '数据导入失败！')
				return;
			}
			msg.success('数据导入成功');
			onTableRefresh();
		}).catch((e)=>{
			if (e == 'cancel' || e == 'close'){
				console.warn(e)
				msg.warn('取消导入操作')
			}else{
				console.error(e)
				msg.error('导入操作失败：'+e);
			}
		}).finally(()=>{
			// 删除上传组件中的文件
			refImportUploader.value.handleRemove(file);
			vShowImportDialog.value = false;
		});
}
// 页面加载时
onMounted(() => {
	doFetchData();
});

// mock 数据
function mockSubmitData(): Promise<PromiseResult<ApiOutput | null, any>> {
	let data = {};
	return new Promise<PromiseResult<ApiOutput | null, any>>((resolve, reject) => {
		setTimeout(() => {
			resolve(new PromiseResult(new ApiOutput(data), null))
		}, Math.round(100 + Math.random() * 1000));
	})
}

// mock 数据
function mockTableData(pageIdx: number, pageSize: number): Promise<PromiseResult<ApiOutput | null, any>> {
	let data = {
		list: [] as any[],
		page: {
			recordSize: 0, pageIdx: pageIdx, pageSize: pageSize,
		},
	};
	data.page.recordSize = pageSize + Math.round(Math.random() * 100);
	let size = data.page.recordSize - (pageIdx - 1) * pageSize;
	if (size > 0) {
		for (let i = 0; i < Math.min(size, pageSize); i++) {
			data.list.push({
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
				${col.javaVariableName}: new Date().getTime(),
	#else
		#if(${col.name.toLowerCase().endsWith('_sts')})
				${col.javaVariableName}: ['A', 'I'][Math.floor(Math.random() * 2)],
		#else
				${col.javaVariableName}: 'Data' + (Math.round(Math.random() * 1000)),
		#end
	#end
#end
			})
		}
	}
	return new Promise<PromiseResult<ApiOutput | null, any>>((resolve, reject) => {
		setTimeout(() => {
			resolve(new PromiseResult(new ApiOutput(data), null))
		}, Math.round(100+Math.random()*1000));
	})
}
</script>
<style lang="scss">
</style>
