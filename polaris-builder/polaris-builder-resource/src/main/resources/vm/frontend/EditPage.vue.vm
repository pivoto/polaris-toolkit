#parse("/vm/include.vm")
<template>
	<v-dialog width="75%" ref="refDialog" v-model="vShow" :title="props.readonly?'数据查看':'数据修改'" @resize="onResize">
		<el-form ref="refForm" v-loading="vLoadingForm" :rules="vFormRules" :model="vFormData" label-width="90px">
			<v-row :gutter="5">
#foreach($col in $table.columns)
#if(${col.javaVariableName.equals('crtUser')} || ${col.javaVariableName.equals('uptUser')}
	|| ${col.javaVariableName.equals('crtUserName')} || ${col.javaVariableName.equals('uptUserName')}
	|| ${col.javaVariableName.equals('crtUserId')} || ${col.javaVariableName.equals('uptUserId')}
	|| ${col.javaVariableName.equals('crtUserRealName')} || ${col.javaVariableName.equals('uptUserRealName')}
	|| ${col.javaVariableName.equals('crtDt')} || ${col.javaVariableName.equals('uptDt')}
	|| ${col.primary})
	#set($env.editPageColReadonly='readonly disabled')
#else
	#set($env.editPageColReadonly=':readonly="props.readonly" :disabled="props.readonly"')
#end
#if(${env.entityExtInterface.contains('Creatable')} && ${col.javaVariableName.equals('crtUser')})
	#if(!$table.containsColumnVariableName('crtUserName'))
				<v-col-form-item type="input" label="${col.label}" prop="crtUserName" v-model="vFormData.crtUserName"
					clearable ${env.editPageColReadonly} item-style="width: 200px;" />
	#end
#elseif(${env.entityExtInterface.contains('Updatable')} && ${col.javaVariableName.equals('uptUser')})
	#if(!$table.containsColumnVariableName('uptUserName'))
				<v-col-form-item type="input" label="${col.label}" prop="uptUserName" v-model="vFormData.crtUserName"
					clearable ${env.editPageColReadonly} item-style="width: 200px;" />
	#end
#elseif(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
				<v-col-form-item type="datetime" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="width: 200px;" />
#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
				<v-col-form-item type="number" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="width: 200px;" :number-props="{precision:0}"/>
#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
				<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="width: 200px;" />
#elseif(${col.jdbcType} == 'FLOAT' || ${col.jdbcType} == 'DOUBLE')
				<v-col-form-item type="number" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="width: 200px;" :number-props="{precision:${col.decimalDigits}}"/>
#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
				<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="width: 200px;" />
#else
	#if(${col.name.toLowerCase().endsWith('_sts')})
				<v-col-form-item type="switch" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly}
					:switch-props="{width:60,inlinePrompt:true,activeValue:'A',inactiveValue:'I',activeText:'生效',inactiveText:'失效'}" />
	#else
				<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="width: 200px;" />
	#end
#end
#end
			</v-row>
		</el-form>
		<template #footer>
			<div class="dialog-footer">
				<template v-if="props.readonly">
					<el-button icon="EleCircleCloseFilled" type="primary" @click="onCancel()">关闭</el-button>
				</template>
				<template v-else>
					<el-button icon="EleCircleCheckFilled" type="primary" @click="onSubmit()">提交</el-button>
					<el-button icon="EleCircleCloseFilled" type="primary" @click="onCancel()">取消</el-button>
				</template>
			</div>
		</template>
	</v-dialog>
</template>
<script lang="ts">
export default {
	name: "Edit${table.javaClassName}"
}
</script>
<script setup lang="ts">
import {
	computed, watch, provide, inject, nextTick,
	defineComponent, getCurrentInstance,
	onMounted, onActivated, onDeactivated, onUnmounted,
	reactive, ref, shallowReactive, shallowRef, toRefs, unref
} from "vue";
import type {
	PropType, ShallowRef, Ref, ComputedRef, ShallowReactive,
	ComponentInternalInstance, ComponentPublicInstance
} from 'vue';
import type {FormInstance, FormRules} from 'element-plus'
import type {RuleItem, ValidateError, ValidateFieldsError} from 'async-validator';

import VDialog from '/@/components/page/VDialog.vue';
import VRow from '/@/components/page/VRow.vue';
import VCol from '/@/components/page/VCol.vue';
import VColFormItem from '/@/components/page/VColFormItem.vue';
import SvgIcon from "/@/components/icon/SvgIcon.vue";

import msg, {error} from "/@/common/core/msg";
import * as validation from "/@/common/core/validation";
import {formatDate} from "/@/common/core/date";
import {apix,post,postx} from "/@/common/api";
import {PromiseResult} from "/@/common/core/utils";
import ApiOutput from "/@/common/api/ApiOutput";

interface Props {
	show: boolean,
	readonly?: boolean,
	data: ParamType,
}

type ParamType = {
#foreach($col in $table.pkColumns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
	#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
	${col.javaVariableName}#if(${col.nullable})?#end: string,
	#elseif(${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
	${col.javaVariableName}#if(${col.nullable})?#end: string,
	#else
	${col.javaVariableName}#if(${col.nullable})?#end: string,
	#end
#end
}
type FormType = {
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
	${col.javaVariableName}?: number,
	#elseif(${env.entityExtInterface.contains('Creatable')} && ${col.javaVariableName.equals('crtUser')})
	crtUser?: string,
	#if(!$table.containsColumnVariableName('crtUserName'))
	crtUserName?: string,
	#end
	#elseif(${env.entityExtInterface.contains('Updatable')} && ${col.javaVariableName.equals('uptUser')})
	uptUser?: string,
	#if(!$table.containsColumnVariableName('uptUserName'))
	uptUserName?: string,
	#end
	#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
	${col.javaVariableName}?: number,
	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
	${col.javaVariableName}?: string,
	#elseif(${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
	${col.javaVariableName}?: number,
	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
	${col.javaVariableName}?: string,
	#else
	${col.javaVariableName}?: string,
	#end
#end
}

##const props = defineProps({
##	show: {
##		type: Boolean,
##		required: false,
##		default: true
##	},
##	readonly: {
##		type: Boolean,
##		required: false,
##		default: true
##	},
##	data: {
##		type: Object as PropType<ParamType>,
##		required: true,
##	}
##});
const props = withDefaults(defineProps<Props>(), {
	show: true,
	readonly: true,
});

const emits = defineEmits<{
	(e: 'update:show', show: boolean): void,
	(e: 'afterSubmit'): void,
}>();

const Fields = {
#foreach($col in $table.columns)
	${col.javaVariableName}: '${col.label}',
#end
};
const instance = getCurrentInstance();
const proxy = instance?.proxy;
const refDialog = ref() as Ref<InstanceType<typeof VDialog>>;
const refForm = ref<FormInstance>() as Ref<FormInstance>;
const vWinWidth = ref(document.documentElement.clientWidth * 0.75);
const vBodyHeight = ref(document.documentElement.clientHeight * 0.75);
const vShow = ref(props.show);
const vParamSync = ref(false);
const vLoadingForm = ref(false);
const vFormData = ref<FormType>({});
const vFormRules = ref<FormRules<FormType>>({});

// validators
{
	const buildRequiredNumberValidator:()=>RuleItem = ()=>{
		return {
			validator: (rule, value, callback) => {
					if (value == null || /^\s*$/.test(value)) {
						return new Error('不能为空');
					}
				callback();
			}
		};
	}
	const buildRequiredStringValidator:()=>RuleItem = ()=>{
		return {
			validator: (rule, value, callback) => {
				if (value == null || /^\s*$/.test(value)) {
					return new Error('不能为空');
				}
				if (/\s+/.test(value)) {
					return new Error('不能有空格')
				}
				callback();
			}
		};
	}
#foreach($col in $table.columns)
	#if(${col.javaVariableName.equals('crtUser')} || ${col.javaVariableName.equals('uptUser')}
	|| ${col.javaVariableName.equals('crtDt')} || ${col.javaVariableName.equals('uptDt')})
## ignore
	#elseif(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [buildRequiredNumberValidator()];
		#end
	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT' || ${col.jdbcType} == 'BIGINT' || ${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' || ${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [buildRequiredNumberValidator()];
		#end
	#else
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [buildRequiredStringValidator()];
		#end
	#end
#end
}

watch(() => props.show, (nv, ov) => {
	vShow.value = nv;
	if (props.show){
		onFetchInitData(props.data)
	}
});
watch(() => vShow.value, (nv, ov) => {
	if (props.show != nv) {
		emits('update:show', nv)
	}
})

watch(() => props.data, (nv, ov) => {
	vParamSync.value = false;
	if (props.show){
		onFetchInitData(props.data)
	}
})

function onResize(width: number, height: number, bodyHeight: number) {
	console.log('onResize', arguments)
	vWinWidth.value = width;
	vBodyHeight.value = bodyHeight;
}

function updateShow(show: boolean) {
	vShow.value = show;
	emits('update:show', show);
}

function openDialog() {
	updateShow(true)
}

function closeDialog() {
	updateShow(false)
}

async function onFetchInitData(param: ParamType) {
	console.log('onFetchInitData', param)
	if (vParamSync.value){
		return;
	}
#foreach($col in $table.pkColumns)
	if (!param.${col.javaVariableName}){
		return;
	}
#end
	vLoadingForm.value = true;
	try {
		//let rs = await mockInitData(param);
		let rs = await apix({
			method: 'post',
			url: '/api/$!{env.rpcCodePrefix}${table.javaClassName}Get',
			headers: {},
			data: {
				param: {
#foreach($col in $table.pkColumns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
					${col.javaVariableName} : [param.${col.javaVariableName},param.${col.javaVariableName}],
	#else
					${col.javaVariableName} : param.${col.javaVariableName},
	#end
#end
				}
			}
		});
		if (rs.hasError()) {
			msg.error(rs.getErrMessage() || '查询失败！')
			return;
		}
		vParamSync.value = true;
		vFormData.value = {...rs.output.entity||{}};
	} finally {
		vLoadingForm.value = false;
	}
}

function onSubmit() {
	validation.validateForm(refForm.value as FormInstance, Fields, async ()=>{
		//let rs = await mockSubmitData();
		let rs = await apix({
			method: 'post',
			url: '/api/$!{env.rpcCodePrefix}${table.javaClassName}Dml',
			headers: {},
			data: {
				type: 'UPDATE',
				entity: vFormData.value
			}
		});
		console.log(rs.output, rs.error)
		if (rs.hasError()) {
			msg.error(rs.getErrMessage()  || '提交失败！')
			return;
		}
		msg.success('提交成功！')
		closeDialog()
		emits('afterSubmit');
	});
}

function onCancel() {
	closeDialog()
}

function mockSubmitData(): Promise<PromiseResult<ApiOutput | null, any>> {
	let data = {};
	return new Promise<PromiseResult<ApiOutput | null, any>>((resolve, reject) => {
		setTimeout(() => {
			resolve(new PromiseResult(new ApiOutput(data), null))
		}, Math.round(100 + Math.random() * 1000));
	})
}

function mockInitData(param: ParamType): Promise<PromiseResult<ApiOutput | null, any>> {
	let data = {
		entity: {...param}
	};
	return new Promise<PromiseResult<ApiOutput | null, any>>((resolve, reject) => {
		setTimeout(() => {
			resolve(new PromiseResult(new ApiOutput(data), null))
		}, Math.round(100 + Math.random() * 1000));
	})
}

</script>
<style lang="scss">
</style>
