#parse("/vm/include.vm")
<template>
	<v-dialog width="75%" ref="refDialog" v-model="vShow" :title="props.readonly?'数据查看':'数据修改'" @resize="onResize">
		<el-form ref="refForm" v-loading="vLoadingForm" :rules="vFormRules" :model="vFormData" label-width="90px">
			<v-row :gutter="5">
#foreach($col in $table.columns)
#if(
	${col.primary}
	|| ${col.javaVariableName.equals('createUser')} || ${col.javaVariableName.equals('updateUser')}
	|| ${col.javaVariableName.equals('createDate')} || ${col.javaVariableName.equals('updateDate')}
	|| ${col.javaVariableName.equals('createUserName')} || ${col.javaVariableName.equals('updateUserName')}
	|| ${col.javaVariableName.equals('createUserRealName')} || ${col.javaVariableName.equals('updateUserRealName')}
	|| ${col.javaVariableName.equals('crtUser')} || ${col.javaVariableName.equals('uptUser')}
	|| ${col.javaVariableName.equals('crtDt')} || ${col.javaVariableName.equals('uptDt')}
	|| ${col.javaVariableName.equals('crtUserId')} || ${col.javaVariableName.equals('uptUserId')}
	|| ${col.javaVariableName.equals('crtUserName')} || ${col.javaVariableName.equals('uptUserName')}
	|| ${col.javaVariableName.equals('crtUserRealName')} || ${col.javaVariableName.equals('uptUserRealName')}
	)
	#set($env.editPageColReadonly='readonly disabled')
#else
	#set($env.editPageColReadonly=':readonly="props.readonly" :disabled="props.readonly"')
#end
#if(${env.entityExtInterface.contains('Creatable')} && ${col.javaVariableName.equals('crtUser')})
	#if(!$table.containsColumnVariableName('crtUserName'))
				<v-col-form-item type="input" label="${col.label}" prop="crtUserName" v-model="vFormData.crtUserName"
					clearable ${env.editPageColReadonly} item-style="min-width: 200px;" />
	#end
#elseif(${env.entityExtInterface.contains('Updatable')} && ${col.javaVariableName.equals('uptUser')})
	#if(!$table.containsColumnVariableName('uptUserName'))
				<v-col-form-item type="input" label="${col.label}" prop="uptUserName" v-model="vFormData.crtUserName"
					clearable ${env.editPageColReadonly} item-style="min-width: 200px;" />
	#end
#elseif(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP' || ${col.javaTypeSimpleName}=='Date' || ${col.javaTypeSimpleName}=='Timestamp')
				<v-col-form-item type="datetime" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="min-width: 200px;" />
##	#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
#elseif(${col.javaTypeSimpleName}=='Integer' || ${col.javaTypeSimpleName}=='Short' || ${col.javaTypeSimpleName}=='Byte')
				<v-col-form-item type="number" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="min-width: 200px;" :number-props="{precision:0}"/>
##	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
#elseif(${col.javaTypeSimpleName}=='Long')
				<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="min-width: 200px;" />
##	#elseif(${col.jdbcType} == 'FLOAT' || ${col.jdbcType} == 'DOUBLE')
#elseif(${col.javaTypeSimpleName}=='Float' || ${col.javaTypeSimpleName}=='Double')
				<v-col-form-item type="number" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="min-width: 200px;" :number-props="{precision:${col.decimalDigits}}"/>
##	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
#elseif(${col.javaTypeSimpleName}=='BigDecimal')
				<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="min-width: 200px;" />
##	#elseif(${col.jdbcType} == 'BIT' || ${col.jdbcType} == 'BOOLEAN')
#elseif(${col.javaTypeSimpleName}=='Boolean')
				<v-col-form-item type="switch" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly}
					:switch-props="{width:60,inlinePrompt:true,activeValue:true,inactiveValue:false,activeText:'是',inactiveText:'否'}" />
#else
	#if(${col.name.toLowerCase().endsWith('_sts')} || ${col.name.toLowerCase().endsWith('_status')})
				<v-col-form-item type="switch" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly}
					:switch-props="{width:60,inlinePrompt:true,activeValue:'A',inactiveValue:'I',activeText:'生效',inactiveText:'失效'}" />
	#else
				<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable ${env.editPageColReadonly} item-style="min-width: 200px;" />
	#end
#end
#end
			</v-row>
		</el-form>
		<template #footer>
			<div class="dialog-footer">
				<template v-if="props.readonly">
					<el-button icon="EleCircleCloseFilled" type="primary" @click="onCancel()">关闭</el-button>
				</template>
				<template v-else>
					<el-button icon="EleCircleCheckFilled" type="primary" @click="onSubmit()">提交</el-button>
					<el-button icon="EleCircleCloseFilled" type="primary" @click="onCancel()">取消</el-button>
				</template>
			</div>
		</template>
	</v-dialog>
</template>
##<script lang="ts">
##export default {
##	name: "Edit${table.javaClassName}"
##}
##</script>
<script setup lang="ts">
import {
	computed, watch, provide, inject, nextTick,
	defineComponent, getCurrentInstance,
	onMounted, onActivated, onDeactivated, onUnmounted,
	reactive, ref, shallowReactive, shallowRef, toRefs, unref
} from "vue";
import type {
	PropType, ShallowRef, Ref, ComputedRef, ShallowReactive,
	ComponentInternalInstance, ComponentPublicInstance
} from 'vue';
import type {FormInstance, FormRules} from 'element-plus'
import type {RuleItem, ValidateError, ValidateFieldsError} from 'async-validator';

import VDialog from '/@/components/page/VDialog.vue';
import VRow from '/@/components/page/VRow.vue';
import VCol from '/@/components/page/VCol.vue';
import VColFormItem from '/@/components/page/VColFormItem.vue';
import SvgIcon from "/@/components/icon/SvgIcon.vue";

import msg, {error} from "/@/common/core/msg";
import * as validation from "/@/common/core/validation";
import {formatDate} from "/@/common/core/date";
import {apix} from "/@/common/api";
import {do$!{env.rpcCodePrefix}${table.javaClassName}Dml, do$!{env.rpcCodePrefix}${table.javaClassName}Get}  from './Api${table.javaClassName}';

interface Props {
	show: boolean,
	readonly?: boolean,
	data: ParamType,
}

type ParamType = {
#foreach($col in $table.pkColumns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP' || ${col.javaTypeSimpleName}=='Date' || ${col.javaTypeSimpleName}=='Timestamp')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
##	#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
	#elseif(${col.javaTypeSimpleName}=='Integer' || ${col.javaTypeSimpleName}=='Short' || ${col.javaTypeSimpleName}=='Byte')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
##	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
	#elseif(${col.javaTypeSimpleName}=='Long')
	${col.javaVariableName}#if(${col.nullable})?#end: string,
##	#elseif(${col.jdbcType} == 'FLOAT' || ${col.jdbcType} == 'DOUBLE')
	#elseif(${col.javaTypeSimpleName}=='Float' || ${col.javaTypeSimpleName}=='Double')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
##	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
	#elseif(${col.javaTypeSimpleName}=='BigDecimal')
	${col.javaVariableName}#if(${col.nullable})?#end: string,
##	#elseif(${col.jdbcType} == 'BIT' || ${col.jdbcType} == 'BOOLEAN')
	#elseif(${col.javaTypeSimpleName}=='Boolean')
	${col.javaVariableName}#if(${col.nullable})?#end: boolean,
	#else
	${col.javaVariableName}#if(${col.nullable})?#end: string,
	#end
#end
}
type FormType = {
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP' || ${col.javaTypeSimpleName}=='Date' || ${col.javaTypeSimpleName}=='Timestamp')
	${col.javaVariableName}?: number,
##	#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
	#elseif(${col.javaTypeSimpleName}=='Integer' || ${col.javaTypeSimpleName}=='Short' || ${col.javaTypeSimpleName}=='Byte')
	${col.javaVariableName}?: number,
##	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
	#elseif(${col.javaTypeSimpleName}=='Long')
	${col.javaVariableName}?: string,
##	#elseif(${col.jdbcType} == 'FLOAT' || ${col.jdbcType} == 'DOUBLE')
	#elseif(${col.javaTypeSimpleName}=='Float' || ${col.javaTypeSimpleName}=='Double')
	${col.javaVariableName}?: number,
##	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
	#elseif(${col.javaTypeSimpleName}=='BigDecimal')
	${col.javaVariableName}?: string,
##	#elseif(${col.jdbcType} == 'BIT' || ${col.jdbcType} == 'BOOLEAN')
	#elseif(${col.javaTypeSimpleName}=='Boolean')
	${col.javaVariableName}?: boolean,
	#else
	${col.javaVariableName}?: string,
	#end
#end
#if(!$table.containsColumnVariableName('createUser'))
	#if($table.containsColumnVariableName('createUserName') && $table.getColumnByVariableName('createUserName').javaTypeSimpleName == 'String')
	createUser?: string,
	#end
#end
#if(!$table.containsColumnVariableName('createUserName'))
	#if($table.containsColumnVariableName('createUser') && $table.getColumnByVariableName('createUser').javaTypeSimpleName == 'Long')
	createUserName?: string,
	#end
#end
#if(!$table.containsColumnVariableName('createUserRealName'))
	#if($table.containsColumnVariableName('createUser') || $table.containsColumnVariableName('createUserName'))
	createUserRealName?: string,
	#end
#end
#if(!$table.containsColumnVariableName('updateUser'))
	#if($table.containsColumnVariableName('updateUserName') && $table.getColumnByVariableName('updateUserName').javaTypeSimpleName == 'String')
	updateUser?: string,
	#end
#end
#if(!$table.containsColumnVariableName('updateUserName'))
	#if($table.containsColumnVariableName('updateUser') && $table.getColumnByVariableName('updateUser').javaTypeSimpleName == 'Long')
	updateUserName?: string,
	#end
#end
#if(!$table.containsColumnVariableName('updateUserRealName'))
	#if($table.containsColumnVariableName('updateUser') || $table.containsColumnVariableName('updateUserName'))
	updateUserRealName?: string,
	#end
#end
#if(!$table.containsColumnVariableName('crtUserId'))
	#if($table.containsColumnVariableName('crtUser') && $table.getColumnByVariableName('crtUser').javaTypeSimpleName == 'String')
	crtUserId?: string,
	#elseif($table.containsColumnVariableName('crtUserName'))
	crtUserId?: string,
	#end
#end
#if(!$table.containsColumnVariableName('crtUserName'))
	#if($table.containsColumnVariableName('crtUser') && $table.getColumnByVariableName('crtUser').javaTypeSimpleName == 'Long')
	crtUserName?: string,
	#elseif($table.containsColumnVariableName('crtUserId'))
	crtUserName?: string,
	#end
#end
#if(!$table.containsColumnVariableName('crtUserRealName'))
	#if($table.containsColumnVariableName('crtUser')
	|| $table.containsColumnVariableName('crtUserId') || $table.containsColumnVariableName('crtUserName'))
	crtUserRealName?: string,
	#end
#end
#if(!$table.containsColumnVariableName('uptUserId'))
	#if($table.containsColumnVariableName('uptUser') && $table.getColumnByVariableName('uptUser').javaTypeSimpleName == 'String')
	uptUserId?: string,
	#elseif($table.containsColumnVariableName('uptUserName'))
	uptUserId?: string,
	#end
#end
#if(!$table.containsColumnVariableName('uptUserName'))
	#if($table.containsColumnVariableName('uptUser') && $table.getColumnByVariableName('uptUser').javaTypeSimpleName == 'Long')
	uptUserName?: string,
	#elseif($table.containsColumnVariableName('uptUserId'))
	uptUserName?: string,
	#end
#end
#if(!$table.containsColumnVariableName('uptUserRealName'))
	#if($table.containsColumnVariableName('uptUser')
	|| $table.containsColumnVariableName('uptUserId') || $table.containsColumnVariableName('uptUserName'))
	uptUserRealName?: string,
	#end
#end
}

defineOptions({ name: 'Edit${table.javaClassName}' });

const Fields = {
#foreach($col in $table.columns)
	${col.javaVariableName}: '${col.label}',
#end
};

##const props = defineProps({
##	show: {
##		type: Boolean,
##		required: false,
##		default: true
##	},
##	readonly: {
##		type: Boolean,
##		required: false,
##		default: true
##	},
##	data: {
##		type: Object as PropType<ParamType>,
##		required: true,
##	}
##});
const props = withDefaults(defineProps<Props>(), {
	show: true,
	readonly: true,
});
const emits = defineEmits<{
	(e: 'update:show', show: boolean): void,
	(e: 'afterSubmit'): void,
}>();
const instance = getCurrentInstance();
const proxy = instance?.proxy;
const refDialog = ref() as Ref<InstanceType<typeof VDialog>>;
const refForm = ref<FormInstance>() as Ref<FormInstance>;
const vWinWidth = ref(document.documentElement.clientWidth * 0.75);
const vBodyHeight = ref(document.documentElement.clientHeight * 0.75);
const vShow = ref(props.show);
const vParamSync = ref(false);
const vLoadingForm = ref(false);
const vFormData = ref<FormType>({});
const vFormRules = ref<FormRules<FormType>>({});

// validators
{
	const buildRequiredNumberValidator:()=>RuleItem = ()=>{
		return {
			validator: (rule, value, callback) => {
					if (value == null || /^\s*$/.test(value)) {
						return new Error('不能为空');
					}
				callback();
			}
		};
	}
	const buildRequiredStringValidator:()=>RuleItem = ()=>{
		return {
			validator: (rule, value, callback) => {
				if (value == null || /^\s*$/.test(value)) {
					return new Error('不能为空');
				}
				if (/\s+/.test(value)) {
					return new Error('不能有空格')
				}
				callback();
			}
		};
	}
#foreach($col in $table.columns)
	#if( ${col.javaVariableName.equals('createUser')} || ${col.javaVariableName.equals('updateUser')}
		|| ${col.javaVariableName.equals('createDate')} || ${col.javaVariableName.equals('updateDate')}
		|| ${col.javaVariableName.equals('createUserName')} || ${col.javaVariableName.equals('updateUserName')}
		|| ${col.javaVariableName.equals('createUserRealName')} || ${col.javaVariableName.equals('updateUserRealName')}
		|| ${col.javaVariableName.equals('crtUser')} || ${col.javaVariableName.equals('uptUser')}
		|| ${col.javaVariableName.equals('crtDt')} || ${col.javaVariableName.equals('uptDt')}
		|| ${col.javaVariableName.equals('crtUserId')} || ${col.javaVariableName.equals('uptUserId')}
		|| ${col.javaVariableName.equals('crtUserName')} || ${col.javaVariableName.equals('uptUserName')}
		|| ${col.javaVariableName.equals('crtUserRealName')} || ${col.javaVariableName.equals('uptUserRealName')}
	)
## ignore
	#elseif(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP' || ${col.javaTypeSimpleName}=='Date' || ${col.javaTypeSimpleName}=='Timestamp')
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [buildRequiredNumberValidator()];
		#end
##	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT' || ${col.jdbcType} == 'BIGINT' || ${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' || ${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
	#elseif(${col.javaTypeSimpleName}=='Integer' || ${col.javaTypeSimpleName}=='Short' || ${col.javaTypeSimpleName}=='Byte'
		|| ${col.javaTypeSimpleName}=='Long' || ${col.javaTypeSimpleName}=='BigDecimal'
		|| ${col.javaTypeSimpleName}=='Float' || ${col.javaTypeSimpleName}=='Double')
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [buildRequiredNumberValidator()];
		#end
	#else
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [buildRequiredStringValidator()];
		#end
	#end
#end
}

watch(() => props.show, (nv, ov) => {
	vShow.value = nv;
	if (props.show) {
		onFetchInitData(props.data)
	}
});
watch(() => vShow.value, (nv, ov) => {
	if (props.show != nv) {
		emits('update:show', nv)
	}
})

watch(() => props.data, (nv, ov) => {
	vParamSync.value = false;
	if (props.show) {
		onFetchInitData(props.data)
	}
})

function onResize(width: number, height: number, bodyHeight: number) {
	console.log('onResize', arguments)
	vWinWidth.value = width;
	vBodyHeight.value = bodyHeight;
}

function updateShow(show: boolean) {
	vShow.value = show;
	emits('update:show', show);
}

function openDialog() {
	updateShow(true)
}

function closeDialog() {
	updateShow(false)
}

async function onFetchInitData(param: ParamType) {
	console.log('onFetchInitData', param)
	if (vParamSync.value) {
		return;
	}
#foreach($col in $table.pkColumns)
	if (!param.${col.javaVariableName}) {
		return;
	}
#end
	vLoadingForm.value = true;
	try {
		await do$!{env.rpcCodePrefix}${table.javaClassName}Get({
				param: {
#foreach($col in $table.pkColumns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP' || ${col.javaTypeSimpleName}=='Date' || ${col.javaTypeSimpleName}=='Timestamp')
					${col.javaVariableName} : [param.${col.javaVariableName},param.${col.javaVariableName}],
	#else
					${col.javaVariableName} : param.${col.javaVariableName},
	#end
#end
				}
			},
			output => {
				vParamSync.value = true;
				vFormData.value = {...output.entity || {}};
			}
		);
	} finally {
		vLoadingForm.value = false;
	}
}

function onSubmit() {
	validation.validateForm(refForm.value as FormInstance, Fields, async ()=>{
		await doJtcBpmProcDefInfoDml({
				type: 'UPDATE',
				entity: vFormData.value
			}
		);
		closeDialog()
		emits('afterSubmit');
	});
}

function onCancel() {
	closeDialog()
}

</script>
<style lang="scss">
</style>
