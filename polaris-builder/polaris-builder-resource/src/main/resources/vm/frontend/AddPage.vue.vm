#parse("/vm/include.vm")
<template>
	<v-dialog width="75%" ref="vRefDialog" v-model="vShow" :title="'数据新增'" @resize="onResize">
		<el-form ref="vRefForm" :rules="vFormRules" :model="vFormData" label-width="90px">
			<v-row :gutter="5">
#foreach($col in $table.columns)
#if( ${col.javaVariableName.equals('createUser')} || ${col.javaVariableName.equals('updateUser')}
	|| ${col.javaVariableName.equals('createDate')} || ${col.javaVariableName.equals('updateDate')}
	|| ${col.javaVariableName.equals('createUserName')} || ${col.javaVariableName.equals('updateUserName')}
	|| ${col.javaVariableName.equals('createUserRealName')} || ${col.javaVariableName.equals('updateUserRealName')}
	|| ${col.javaVariableName.equals('crtUser')} || ${col.javaVariableName.equals('uptUser')}
	|| ${col.javaVariableName.equals('crtDt')} || ${col.javaVariableName.equals('uptDt')}
	|| ${col.javaVariableName.equals('crtUserId')} || ${col.javaVariableName.equals('uptUserId')}
	|| ${col.javaVariableName.equals('crtUserName')} || ${col.javaVariableName.equals('uptUserName')}
	|| ${col.javaVariableName.equals('crtUserRealName')} || ${col.javaVariableName.equals('uptUserRealName')}
	)
## ignore
#elseif(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP' || ${col.javaTypeSimpleName}=='Date' || ${col.javaTypeSimpleName}=='Timestamp')
				<v-col-form-item type="datetime" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable item-style="min-width: 200px;" />
##	#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
#elseif(${col.javaTypeSimpleName}=='Integer' || ${col.javaTypeSimpleName}=='Short' || ${col.javaTypeSimpleName}=='Byte')
				<v-col-form-item type="number" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable item-style="min-width: 200px;" :number-props="{precision:0}" />
##	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
#elseif(${col.javaTypeSimpleName}=='Long')
				<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable item-style="min-width: 200px;" />
##	#elseif(${col.jdbcType} == 'FLOAT' || ${col.jdbcType} == 'DOUBLE')
#elseif(${col.javaTypeSimpleName}=='Float' || ${col.javaTypeSimpleName}=='Double')
				<v-col-form-item type="number" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable item-style="min-width: 200px;" :number-props="{precision:${col.decimalDigits}}" />
##	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
#elseif(${col.javaTypeSimpleName}=='BigDecimal')
				<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable item-style="min-width: 200px;" />
##	#elseif(${col.jdbcType} == 'BIT' || ${col.jdbcType} == 'BOOLEAN')
#elseif(${col.javaTypeSimpleName}=='Boolean')
				<v-col-form-item type="switch" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable :switch-props="{width:60,inlinePrompt:true,activeValue:true,inactiveValue:false,activeText:'是',inactiveText:'否'}" />
#else
	#if(${col.name.toLowerCase().endsWith('_sts')} || ${col.name.toLowerCase().endsWith('_status')})
				<v-col-form-item type="switch" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable :switch-props="{width:60,inlinePrompt:true,activeValue:'A',inactiveValue:'I',activeText:'生效',inactiveText:'失效'}" />
	#else
				<v-col-form-item type="input" label="${col.label}" prop="${col.javaVariableName}" v-model="vFormData.${col.javaVariableName}"
					clearable item-style="min-width: 200px;" />
	#end
#end
#end
			</v-row>
		</el-form>
		<template #footer>
			<div class="dialog-footer">
				<el-button icon="EleCircleCheckFilled" type="primary" @click="onSubmit()">提交</el-button>
				<el-button icon="EleCircleCloseFilled" type="primary" @click="onCancel()">取消</el-button>
			</div>
		</template>
	</v-dialog>
</template>
##<script lang="ts">
##export default {
##	name: "Add${table.javaClassName}"
##}
##</script>
<script setup lang="ts">
import {
	computed, watch, provide, inject, nextTick,
	defineComponent, getCurrentInstance,
	onMounted, onActivated, onDeactivated, onUnmounted,
	reactive, ref, shallowReactive, shallowRef, toRefs, unref
} from "vue";
import type {
	PropType, ShallowRef, Ref, ComputedRef, ShallowReactive,
	ComponentInternalInstance, ComponentPublicInstance
} from 'vue';
import type {FormInstance, FormRules, FormItemRule} from 'element-plus'
import type {RuleItem, ValidateError, ValidateFieldsError} from 'async-validator';

import VDialog from '/@/components/page/VDialog.vue';
import VRow from '/@/components/page/VRow.vue';
import VCol from '/@/components/page/VCol.vue';
import VColFormItem from '/@/components/page/VColFormItem.vue';
import SvgIcon from "/@/components/icon/SvgIcon.vue";

import msg, {error} from "/@/common/core/msg";
import * as validation from "/@/common/core/validation";
import {formatDate} from "/@/common/core/date";
import {apix} from "/@/common/api";
import {do$!{env.rpcCodePrefix}${table.javaClassName}Dml}  from './Api${table.javaClassName}';

interface Props {
	show: boolean,
}

type FormType = {
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP' || ${col.javaTypeSimpleName}=='Date' || ${col.javaTypeSimpleName}=='Timestamp')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
##	#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
	#elseif(${col.javaTypeSimpleName}=='Integer' || ${col.javaTypeSimpleName}=='Short' || ${col.javaTypeSimpleName}=='Byte')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
## #elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
	#elseif(${col.javaTypeSimpleName}=='Long')
	${col.javaVariableName}#if(${col.nullable})?#end: string,
##	#elseif(${col.jdbcType} == 'FLOAT' || ${col.jdbcType} == 'DOUBLE')
	#elseif(${col.javaTypeSimpleName}=='Float' || ${col.javaTypeSimpleName}=='Double')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
##	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
	#elseif(${col.javaTypeSimpleName}=='BigDecimal')
	${col.javaVariableName}#if(${col.nullable})?#end: string,
##	#elseif(${col.jdbcType} == 'BIT' || ${col.jdbcType} == 'BOOLEAN')
	#elseif(${col.javaTypeSimpleName}=='Boolean')
	${col.javaVariableName}#if(${col.nullable})?#end: boolean,
	#else
	${col.javaVariableName}#if(${col.nullable})?#end: string,
	#end
#end
}

const Fields = {
#foreach($col in $table.columns)
	${col.javaVariableName}: '${col.label}',
#end
};

defineOptions({ name: 'Add${table.javaClassName}' });

const props = withDefaults(defineProps<Props>(), {
	show: true,
});

const emits = defineEmits<{
	(e: 'update:show', show: boolean): void,
	(e: 'success'): void,
}>();

const instance = getCurrentInstance();
const proxy = instance?.proxy;
const vRefDialog = ref() as Ref<InstanceType<typeof VDialog>>;
const vRefForm = ref<FormInstance>() as Ref<FormInstance>;
const vWinWidth = ref(document.documentElement.clientWidth * 0.75);
const vBodyHeight = ref(document.documentElement.clientHeight * 0.75);
const vShow = ref(props.show);
const vParamSync = ref(false);
const vLoadingForm = ref(false);
const vFormData = ref<FormType>({
#foreach($col in $table.columns)
#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP' || ${col.javaTypeSimpleName}=='Date' || ${col.javaTypeSimpleName}=='Timestamp')
	${col.javaVariableName}: #if(${col.nullable}) undefined #else 0 #end,
##	#elseif(${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT')
#elseif(${col.javaTypeSimpleName}=='Integer' || ${col.javaTypeSimpleName}=='Short' || ${col.javaTypeSimpleName}=='Byte')
	${col.javaVariableName}: #if(${col.nullable}) undefined #else 0 #end,
## #elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'BIGINT')
#elseif(${col.javaTypeSimpleName}=='Long')
	${col.javaVariableName}: #if(${col.nullable}) undefined #else '' #end,
##	#elseif(${col.jdbcType} == 'FLOAT' || ${col.jdbcType} == 'DOUBLE')
#elseif(${col.javaTypeSimpleName}=='Float' || ${col.javaTypeSimpleName}=='Double')
	${col.javaVariableName}: #if(${col.nullable}) undefined #else 0 #end,
##	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL')
#elseif(${col.javaTypeSimpleName}=='BigDecimal')
	${col.javaVariableName}: #if(${col.nullable}) undefined #else '' #end,
##	#elseif(${col.jdbcType} == 'BIT' || ${col.jdbcType} == 'BOOLEAN')
#elseif(${col.javaTypeSimpleName}=='Boolean')
	${col.javaVariableName}: #if(${col.nullable}) undefined #else false #end,
#else
	${col.javaVariableName}: #if(${col.nullable}) undefined #else '' #end,
#end
#end
});
const vFormRules = ref<FormRules<FormType>>({});

// validators
{
#foreach($col in $table.columns)
	#if( ${col.javaVariableName.equals('createUser')} || ${col.javaVariableName.equals('updateUser')}
	|| ${col.javaVariableName.equals('createDate')} || ${col.javaVariableName.equals('updateDate')}
	|| ${col.javaVariableName.equals('createUserName')} || ${col.javaVariableName.equals('updateUserName')}
	|| ${col.javaVariableName.equals('createUserRealName')} || ${col.javaVariableName.equals('updateUserRealName')}
	|| ${col.javaVariableName.equals('crtUser')} || ${col.javaVariableName.equals('uptUser')}
	|| ${col.javaVariableName.equals('crtDt')} || ${col.javaVariableName.equals('uptDt')}
	|| ${col.javaVariableName.equals('crtUserId')} || ${col.javaVariableName.equals('uptUserId')}
	|| ${col.javaVariableName.equals('crtUserName')} || ${col.javaVariableName.equals('uptUserName')}
	|| ${col.javaVariableName.equals('crtUserRealName')} || ${col.javaVariableName.equals('uptUserRealName')}
	)
## ignore
	#elseif(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP' || ${col.javaTypeSimpleName}=='Date' || ${col.javaTypeSimpleName}=='Timestamp')
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [validation.buildRequiredNumberRule('${col.label}')];
		#end
##	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT' || ${col.jdbcType} == 'BIGINT' || ${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' || ${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
	#elseif(${col.javaTypeSimpleName}=='Integer' || ${col.javaTypeSimpleName}=='Short' || ${col.javaTypeSimpleName}=='Byte'
	|| ${col.javaTypeSimpleName}=='Long' || ${col.javaTypeSimpleName}=='BigDecimal'
	|| ${col.javaTypeSimpleName}=='Float' || ${col.javaTypeSimpleName}=='Double')
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [validation.buildRequiredNumberRule('${col.label}')];
		#end
##	#elseif(${col.jdbcType} == 'BIT' || ${col.jdbcType} == 'BOOLEAN')
	#elseif(${col.javaTypeSimpleName}=='Boolean')
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [validation.buildRequiredRule('${col.label}')];
		#end
	#else
		#if(!${col.nullable})
	vFormRules.value.${col.javaVariableName} = [validation.buildRequiredStringRule('${col.label}')];
		#end
	#end
#end
}

watch(() => props.show, (nv, ov) => vShow.value = nv);
watch(() => vShow.value, (nv, ov) => {
	if (props.show != nv) {
		emits('update:show', nv)
	}
})

function onResize(width: number, height: number, bodyHeight: number) {
	console.log('onResize', arguments)
	vWinWidth.value = width;
	vBodyHeight.value = bodyHeight;
}

function doUpdateShow(show: boolean) {
	vShow.value = show;
	emits('update:show', show);
}

function doOpenDialog() {
	doUpdateShow(true)
}

function doCloseDialog() {
	doUpdateShow(false)
}

function onSubmit() {
	validation.validateForm(vRefForm.value as FormInstance, Fields, async ()=>{
		await do$!{env.rpcCodePrefix}${table.javaClassName}Dml({
			type: 'INSERT',
			entity: vFormData.value
		}, (data) => {
			doCloseDialog()
			emits('success');
		});
	});
}

function onCancel() {
	doCloseDialog()
}

</script>
<style lang="scss">
</style>
