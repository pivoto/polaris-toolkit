#parse("/vm/include.vm")
###include("vm/include.vm")
#if(${table.javaPackageName})
	#set($pkgPrefix="${table.javaPackageName}.")
#else
	#set($pkgPrefix="")
#end
package ${pkgPrefix}${msiPackage}.${msiImplPackage};

import java.sql.Connection;
import java.util.*;

import com.yucheng.cmis.plat.CmisFactory;
import com.ecc.emp.core.Context;
import com.yucheng.cmis.base.CMISException;
import com.ecc.emp.core.EMPException;
import com.yucheng.cmis.pub.annotation.MethodParam;
import com.yucheng.cmis.pub.annotation.MethodService;
import com.yucheng.cmis.pub.annotation.ModuleService;
import com.yucheng.cmis.pub.CMISFactory;
import com.yucheng.cmis.pub.CMISModuleService;
import com.yucheng.cmis.pub.annotation.MethodParam;
import com.yucheng.cmis.pub.annotation.MethodService;
import lombok.extern.slf4j.Slf4j;

#set($componentClass="${table.javaClassName}${componentSuffix}")
#set($msiClass="${table.javaClassName}${msiSuffix}")
import ${pkgPrefix}${env.entityPackage}.${table.javaClassName};
import ${pkgPrefix}${componentPackage}.${componentClass};
import ${pkgPrefix}${msiPackage}.${msiClass};


/**
 * $!{table.name} $!{table.comment}
 * <br>
 * 对外服务接口实现类
 *
 * @author $!{author}
 * @version ${current.date}
 */
@Slf4j
public class ${table.javaClassName}${msiImplSuffix} extends CMISModuleService implements ${msiClass}{

	@Override
	public boolean add${table.javaClassName}(${table.javaClassName} domain, Connection connection) throws CMISException {
		try {
			${componentClass} comp = CmisFactory.getComponent(${componentClass}.COMPONENT_ID, ${componentClass}.class);
			boolean result = comp.add${table.javaClassName}(domain, connection);
			return result;
		} catch (CMISException e) {
			throw e;
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new CMISException(e);
		}
	}


	@Override
	public ${table.javaClassName} query${table.javaClassName}Detail(${table.javaClassName} param, Connection conn) throws CMISException {
		try {
			${componentClass} comp = CmisFactory.getComponent(${componentClass}.COMPONENT_ID, ${componentClass}.class);
			${table.javaClassName} domain = comp.query${table.javaClassName}Detail(param, conn);
			return domain;
		} catch (CMISException e) {
			throw e;
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new CMISException(e);
		}
	}


	@Override
	public boolean update${table.javaClassName}(${table.javaClassName} domain, Connection conn) throws CMISException {
		try {
			${componentClass} comp = CmisFactory.getComponent(${componentClass}.COMPONENT_ID, ${componentClass}.class);
			boolean result = comp.update${table.javaClassName}(domain, conn);
			return result;
		} catch (CMISException e) {
			throw e;
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new CMISException(e);
		}
	}


	@Override
	public boolean remove${table.javaClassName}(${table.javaClassName} domain, Connection conn) throws CMISException {
		try {
			${componentClass} comp = CmisFactory.getComponent(${componentClass}.COMPONENT_ID, ${componentClass}.class);
			boolean result = comp.remove${table.javaClassName}(domain, conn);
			return result;
		} catch (CMISException e) {
			throw e;
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new CMISException(e);
		}
	}

}
