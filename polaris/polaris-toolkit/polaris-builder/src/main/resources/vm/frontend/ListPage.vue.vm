#parse("/vm/include.vm")
<template>
	<div ref="refDiv">
		<v-query-panel title="查询">
			<el-form :model="state.form.queryForm" label-width="100px" class="">
				<v-row class="mb10">
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
					<v-col>
						<el-form-item label="${col.label}">
							<el-date-picker v-model="state.form.queryForm.${col.javaVariableName}"
								type="datetimerange" value-format="x" format="YYYY-MM-DD HH:mm:ss"
								range-separator="~" start-placeholder="起始时间" end-placeholder="截止时间"
								style="max-width: 200px"></el-date-picker>
						</el-form-item>
					</v-col>
	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' || ${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT' || ${col.jdbcType} == 'BIGINT' || ${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
					<v-col>
						<el-form-item label="${col.label}">
							<el-input-number v-model="state.form.${col.javaVariableName}" placeholder="${col.label}"
								:precision="2" clearable style="width: 200px;" />
						</el-form-item>
					</v-col>
	#else
		#if(${col.name.toLowerCase().endsWith('_sts')})
					<v-col>
						<el-form-item label="${col.label}">
							<el-select v-model="state.form.queryForm.${col.javaVariableName}" clearable placeholder="${col.label}" style="max-width: 200px">
								<el-option v-for="item in [{value:'A',label:'生效'},{value:'I',label:'失效'}]"
									:key="item.value" :label="item.label" :value="item.value as any">
									<el-tag effect="dark" size="small" :type="''" v-if="item.value=='A'">生效</el-tag>
									<el-tag effect="dark" size="small" :type="'danger'" v-else>失效</el-tag>
								</el-option>
							</el-select>
						</el-form-item>
					</v-col>
		#else
					<v-col>
						<el-form-item label="${col.label}">
							<el-input v-model="state.form.queryForm.${col.javaVariableName}" placeholder="${col.label}"
									clearable style="max-width: 180px;">
							</el-input>
						</el-form-item>
					</v-col>
		#end
	#end

#end
				</v-row>
				<v-row>
					<v-col>
						<!-- @formatter:off -->
						<el-button type="primary" @click="doQuery()"><el-icon><EleSearch/></el-icon>查询</el-button>
						<el-button type="primary" @click="doClear()"><el-icon><EleRefresh/></el-icon>重置</el-button>
						<!--<el-button type="primary" @click="onOpenAddDialog()"><el-icon><EleFolderAdd/></el-icon>新增</el-button>-->
						<!-- @formatter:on -->
					</v-col>
				</v-row>
			</el-form>
		</v-query-panel>
		<v-table-panel title="数据列表" :loading="state.loading.tableLoading"
			:records="state.records.rows" :total="state.records.total"
			v-model:page-num="state.page.pageIdx"
			v-model:page-size="state.page.pageSize"
			@refresh="onTableRefresh"
			@update:current="onUpdateCurrentRow"
			@update:sort="onUpdateSortField"
		>
			<template #bar>
				<el-button v-auth="'view'" size="small" type="primary" icon="EleView" @click="onOpenViewDialog()">查看</el-button>
				<el-button v-auth="'add'" size="small" type="primary" icon="EleDocumentAdd" @click="onOpenAddDialog()">新增</el-button>
				<el-button v-auth="'edit'" size="small" type="primary" icon="EleEdit" @click="onOpenEditDialog()">修改</el-button>
				<el-button v-auth="'delete'" size="small" type="primary" icon="EleDelete" @click="onDeleteRecord()">删除</el-button>
			</template>
			<template #default>
				<el-table-column type="index" label="序号" width="50" fixed header-align="center"></el-table-column>
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
				<el-table-column prop="${col.javaVariableName}" label="${col.label}" sortable show-overflow-tooltip :formatter="tableColumnFormatTime"></el-table-column>
	#else
		#if(${col.name.toLowerCase().endsWith('_sts')})
				<el-table-column prop="${col.javaVariableName}" label="${col.label}" show-overflow-tooltip header-align="center">
					<template #default="scope">
						<el-tag effect="dark" size="small" :type="''" v-if="scope.row.${col.javaVariableName}=='A'">生效</el-tag>
						<el-tag effect="dark" size="small" :type="'danger'" v-else>失效</el-tag>
					</template>
				</el-table-column>
		#else
				<el-table-column prop="${col.javaVariableName}" label="${col.label}" sortable show-overflow-tooltip header-align="center"></el-table-column>
		#end
	#end
#end
				<!--<el-table-column label="操作" width="200" align="center">
					<template #default="scope">
						<el-button v-auth="'view'" size="small" plain @click="onOpenViewDialog(scope.row)">查看</el-button>
						<el-button v-auth="'edit'" size="small" plain @click="onOpenEditDialog(scope.row)">修改</el-button>
						<el-button v-auth="'delete'" size="small" plain @click="onDeleteRecord(scope.row)">删除</el-button>
					</template>
				</el-table-column>-->
			</template>
		</v-table-panel>

		<Add${table.javaClassName} ref="refAddDialog" v-model:show="state.show.addDialog"/>
		<Edit${table.javaClassName} ref="refEditDialog" :readonly="state.records.editReadonly" :data="state.records.editParam" v-model:show="state.show.editDialog"/>
	</div>
</template>
<script lang="ts">
export default {
	name: "List${table.javaClassName}"
}
</script>
<script setup lang="ts">
import {
	computed, watch, provide, inject, nextTick,
	defineComponent, getCurrentInstance,
	onMounted, onActivated, onDeactivated, onUnmounted,
	reactive, ref, shallowReactive, shallowRef, toRefs
} from "vue";
import type {ExtractPropTypes} from 'vue';
import VQueryPanel from '/@/components/page/VQueryPanel.vue'
import VTablePanel from '/@/components/page/VTablePanel.vue'
import VRow from '/@/components/page/VRow.vue'
import VCol from '/@/components/page/VCol.vue'
import SvgIcon from "/@/components/icon/SvgIcon.vue";

import Add${table.javaClassName} from './Add${table.javaClassName}.vue';
import Edit${table.javaClassName} from './Edit${table.javaClassName}.vue';
import msg from "/@/common/core/msg";
import {formatDate} from "/@/common/core/date";
import {apiw} from "/@/common/api";
import {PromiseResult} from "/@/common/core/utils";
import ApiOutput from "/@/common/api/ApiOutput";


interface StateType {
	show: {
		addDialog: boolean,
		editDialog: boolean,
	},
	page: {
		pageIdx: number,
		pageSize: number,
	};
	records: {
		total: number,
		rows: any[],
		currentRow?: any,
		editParam: any,
		editReadonly: boolean,
	};
	loading: {
		tableLoading: boolean,
		tenantLoading: boolean,
	},
	form: {
		queryFormCache?: any,
		queryFormInit: any,
		queryForm: any,
	}
}

const refDiv = shallowRef<HTMLElement>();
const refAddDialog = ref();
const refEditDialog = ref();

const state = reactive<StateType>({
	show: {
		addDialog: false,
		editDialog: false,
	},
	page: {
		pageSize: 20,
		pageIdx: 1,
	},
	records: {
		total: 0,
		rows: [],
		editParam:{},
		editReadonly:true,
	},
	loading: {
		tableLoading: false,
		tenantLoading: false,
	},
	form: {
		queryFormInit: {},
		queryForm: {},
	},
});

watch(() => state.page, () => {
	doFetchData();
}, {deep: true})

function doClear() {
	state.form.queryForm = {...state.form.queryFormInit}
}

function doQuery() {
	// if (!state.form.queryForm.tenantId) {
	// 	msg.message('请选择租户', 'error')
	// 	return;
	// }
	state.page.pageIdx = 1
	state.form.queryFormCache = {
		...state.form.queryForm
	};
	doFetchData();
}

// 调用接口查询
async function doFetchData() {
	let queryFormCache = state.form.queryFormCache;
	if (!queryFormCache) {
		return;
	}
	state.loading.tableLoading = true;
	try {
		state.records.rows = [];
		let input = {
			param: {
				...state.form.queryFormCache,
			},
			page: {
				pageIdx: state.page.pageIdx,
				pageSize: state.page.pageSize,
			}
		}
		//let rs = await mockTableData(input.page.pageIdx, input.page.pageSize);
		let rs = await apiw({
			method: 'post',
			url: '/api/$!{env.rpcCodePrefix}${table.javaClassName}Query',
			headers: {},
			data: input
		});
		console.log(rs.data, rs.error)
		if (rs.hasError()) {
			msg.error(rs.error && rs.error.message || '查询失败!')
			return;
		}
		if (!rs.data?.isSuccess()) {
			msg.error(rs.data?.getErrMessage() || '查询失败!' + rs.data?.getErrCode())
			return;
		}
		let output = rs.data?.getData();
		state.records.rows = output.list;
		state.records.total = output.page.recordSize || output.list.length;
		state.page.pageIdx = output.page?.pageNum || state.page.pageIdx
		state.page.pageSize = output.page?.pageSize || state.page.pageSize
	} finally {
		state.loading.tableLoading = false;
	}
}

// 刷新查询结果
function onTableRefresh() {
	doFetchData()
}

// 更新排序字段
function onUpdateSortField(sortFields: string) {
	console.log('update sort field:', sortFields)
	state.form.queryForm.v${dollar}orderBy = sortFields
	doFetchData()
}

// 更新选择记录行
function onUpdateCurrentRow(currentRow: any, oldCurrentRow: any) {
	console.log('update current row:', currentRow, oldCurrentRow)
	state.records.currentRow = currentRow;
}

// 格式化日期字段
function tableColumnFormatTime(row: any, column: any, cellValue: any, index: any) {
	return cellValue && formatDate(new Date(cellValue), 'yyyy-MM-dd HH:mm:ss.SSS')
}


// 打开新增弹窗
function onOpenAddDialog() {
	state.show.addDialog = true;
}
// 打开查看弹窗
function onOpenViewDialog(row?: any){
	row = row || state.records.currentRow
	if (!row){
		msg.error('请选择数据行')
		return;
	}
	state.records.editReadonly = true;
	state.records.editParam = {
		... row
	}
	state.show.editDialog = true;
}
// 打开修改弹窗
function onOpenEditDialog(row?: any){
	row = row || state.records.currentRow
	if (!row){
		msg.error('请选择数据行')
		return;
	}
	state.records.editReadonly = false;
	state.records.editParam = {
		... row
	}
	state.show.editDialog = true;
}
// 删除数据
function onDeleteRecord(row?: any){
	row = row || state.records.currentRow
	if (!row){
		msg.error('请选择数据行')
		return;
	}
	msg.confirm(`确认删除所选记录，是否继续?`,'提示','warning')
		.then(async (d)=>{
			console.log(d)
			//let rs = await mockSubmitData();
			let rs = await apiw({
				method: 'post',
				url: '/api/$!{env.rpcCodePrefix}${table.javaClassName}Dml',
				headers: {},
				data: {
					type: 'DELETE',
					param: row
				}
			});
			console.log(rs.data, rs.error)
			if (rs.hasError()) {
				msg.error(rs.error && rs.error.message || '数据删除失败')
				return;
			}
			if (!rs.data?.isSuccess()) {
				msg.error(rs.data?.getErrMessage() || '数据删除失败：' + rs.data?.getErrCode())
				return;
			}
			msg.success('数据删除成功');
			onTableRefresh();
		}).catch((e)=>{
			if (e == 'cancel' || e == 'close'){
				console.warn(e)
				msg.warn('取消数据删除操作')
			}else{
				console.error(e)
				msg.error('数据删除失败：'+e);
			}
	})
};

// 页面加载时
onMounted(() => {
	doFetchData();
});

// mock 数据
function mockSubmitData(): Promise<PromiseResult<ApiOutput | null, any>> {
	let data = {};
	return new Promise<PromiseResult<ApiOutput | null, any>>((resolve, reject) => {
		setTimeout(() => {
			resolve(new PromiseResult(new ApiOutput(data), null))
		}, Math.round(100 + Math.random() * 1000));
	})
}

// mock 数据
function mockTableData(pageIdx: number, pageSize: number): Promise<PromiseResult<ApiOutput | null, any>> {
	let data = {
		list: [], page: {
			recordSize: 0, pageIdx: pageIdx, pageSize: pageSize,
		},
	};
	data.page.recordSize = pageSize + Math.round(Math.random() * 100);
	let size = data.page.recordSize - (pageIdx - 1) * pageSize;
	if (size > 0) {
		for (let i = 0; i < Math.min(size, pageSize); i++) {
			data.list.push({
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
				${col.javaVariableName}: new Date().getTime(),
	#else
		#if(${col.name.toLowerCase().endsWith('_sts')})
				${col.javaVariableName}: ['A', 'I'][Math.floor(Math.random() * 2)],
		#else
				${col.javaVariableName}: 'Data' + (Math.round(Math.random() * 1000)),
		#end
	#end
#end
			})
		}
	}
	return new Promise<PromiseResult<ApiOutput | null, any>>((resolve, reject) => {
		setTimeout(() => {
			resolve(new PromiseResult(new ApiOutput(data), null))
		}, Math.round(100+Math.random()*1000));
	})
}
</script>
<style lang="scss">
</style>
