#parse("/vm/include.vm")
package ${pkgPrefix}${env.entityPackage.replace('/','.')};

import cn.org.atool.fluent.mybatis.annotation.FluentMybatis;
import cn.org.atool.fluent.mybatis.annotation.NotField;
import cn.org.atool.fluent.mybatis.annotation.TableField;
import cn.org.atool.fluent.mybatis.annotation.TableId;
import cn.org.atool.fluent.mybatis.base.RichEntity;
import cn.org.atool.fluent.mybatis.metadata.DbType;

import java.io.Serializable;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;
import lombok.experimental.Accessors;
#foreach($name in $table.columnJavaTypes)
import $name;
#end
#if(${env.entityExtInterface})
	#set($env.entityExtInterfaceArr=${env.entityExtInterface.split(',')})
	#foreach($name in ${env.entityExtInterfaceArr})
import ${name.trim()};
	#end
#end

/**
 * $!{table.name}
 * $!{table.comment}
 * @author $!{env.author}
 * @since ${current.date}
 */
@SuppressWarnings({"rawtypes", "unchecked"})
@Getter
@Setter
@EqualsAndHashCode(callSuper = false)
@ToString
@AllArgsConstructor
@NoArgsConstructor
@Builder
@FluentMybatis(table = "$!{table.name}", dbType = DbType.ORACLE, useDao = false)
public class ${table.javaClassName}${env.entityClassSuffix} extends RichEntity implements Serializable#if(${env.entityExtInterface})
	#set($env.entityExtInterfaceArr=${env.entityExtInterface.split(',')})
	#foreach($name in ${env.entityExtInterfaceArr}), ${name.trim().substring(1 + ${name.trim().lastIndexOf(".")})}#end
#end{

	private static final long serialVersionUID = 1L;

#foreach($col in $table.pkColumns)
	/** 主键字段: #if(${col.label})$!{col.name} $!{col.label}#else$!{col.name}#end */
	@Schema(description = "#if(${col.label})$!{col.label}#else$!{col.name}#end")
	@TableId(value = "$!{col.name}", auto = false, before = true)
	private ${col.javaTypeSimpleName} ${col.javaVariableName};
#end

#foreach($col in $table.normalColumns)
	/** #if(${col.label})$!{col.name} $!{col.label}#else$!{col.name}#end */
	@Schema(description = "#if(${col.label})$!{col.label}#else$!{col.name}#end")
	@TableField("$!{col.name}")
	private ${col.javaTypeSimpleName} ${col.javaVariableName};
#end

	/** 查询SQL的ORDER BY子句内容(各排序字段) */
	@Schema(hidden = true)
	@NotField
	private transient String v${dollar}orderBy;
	/** 更新SQL的SET值内容 */
	@Schema(hidden = true)
	@NotField
	private transient ${table.javaClassName}${env.entityClassSuffix} v${dollar}updateValues;

	@Override
	public final Class entityClass() {
		return ${table.javaClassName}${env.entityClassSuffix}.class;
	}

}
