#if(${table.javaPackageName})
	#set($pkgPrefix="${table.javaPackageName}.")
#else
	#set($pkgPrefix="")
#end
package ${pkgPrefix}service;

import java.util.List;

import ${pkgPrefix}entity.${table.javaClassName}Entity;

import com.github.pagehelper.Page;

/**
 * [$!{table.comment}]Service类.
 * 
 * @author Mania
 * 
 */
public interface I${table.javaClassName}Service{

	/**
	 * 
	 * 查询满足条件的总数
	 * 
	 * @param ${table.javaVariableName}Entity 查询条件对象
	 * @return 结果总数
	 */
	int getCount(${table.javaClassName}Entity ${table.javaVariableName}Entity);

	/**
	 * 分页查询所有数据,返回当前页{@link Page}对象
	 * 
	 * @param ${table.javaVariableName}Entity 查询条件对象
	 * @param pageNum 页码
	 * @param pageSize 每页记录数
	 * @return 当前页对象
	 */
	Page<${table.javaClassName}Entity> getPage(${table.javaClassName}Entity ${table.javaVariableName}Entity, int pageNum, int pageSize);

	/**
	 * 查询满足条件的不超过数据量上限的所有数据,返回{@link List}对象列表
	 * 
	 * @param ${table.javaVariableName}Entity 查询条件对象
	 * @return 结果对象列表
	 */
	List<${table.javaClassName}Entity> getLimitedList(${table.javaClassName}Entity ${table.javaVariableName}Entity);

	/**
	 * 查询满足条件的不超过数据量上限的所有数据,返回{@link List}对象列表
	 * 
	 * @param ${table.javaVariableName}Entity 查询条件对象
	 * @param maxCount 数据量上限
	 * @return 结果对象列表
	 */
	List<${table.javaClassName}Entity> getLimitedList(${table.javaClassName}Entity ${table.javaVariableName}Entity, int maxCount);

	/**
	 * 查询满足条件的所有数据,返回{@link List}对象列表
	 * 
	 * @param ${table.javaVariableName}Entity 查询条件对象
	 * @return 结果对象列表
	 */
	List<${table.javaClassName}Entity> getList(${table.javaClassName}Entity ${table.javaVariableName}Entity);

	/**
	 * 分页查询所有数据,返回{@link List}对象列表
	 * 
	 * @param ${table.javaVariableName}Entity 查询条件对象
	 * @param pageIndex 页码
	 * @param pageSize 每页记录数
	 * @return 结果对象列表
	 */
	List<${table.javaClassName}Entity> getList(${table.javaClassName}Entity ${table.javaVariableName}Entity, int pageIndex, int pageSize);

	/**
	 * 新增一条记录
	 * 
	 * @param ${table.javaVariableName}Entity 记录对象
	 * @return 影响记录数
	 */
	int insert(${table.javaClassName}Entity ${table.javaVariableName}Entity);

	/**
	 * 根据主键列，删除一条记录
	 * 
	 * @param ${table.javaVariableName}Entity 记录对象
	 * @return 影响记录数
	 */
	int delete(${table.javaClassName}Entity ${table.javaVariableName}Entity);

	/**
	 * 根据主键列，修改一条记录,按入参修改所有列
	 * 
	 * @param ${table.javaVariableName}Entity 记录对象
	 * @return 影响记录数
	 */
	int update(${table.javaClassName}Entity ${table.javaVariableName}Entity);
	
	/**
	 * 根据主键列，修改一条记录,只修改入参的非空字段对应的列
	 * 
	 * @param ${table.javaVariableName}Entity 记录对象
	 * @return 影响记录数
	 */
	int updateSelective(${table.javaClassName}Entity ${table.javaVariableName}Entity);

	/**
	 * 根据主键列查询对象
	 * 
	 * @param ${table.javaVariableName}Entity 查询条件对象
	 * @return 结果对象
	 */
	${table.javaClassName}Entity getById(${table.javaClassName}Entity ${table.javaVariableName}Entity);

	/**
	 * 根据条件查询唯一结果
	 * 
	 * @param ${table.javaVariableName}Entity 查询条件对象
	 * @return 唯一结果对象
	 */
	${table.javaClassName}Entity getUnique(${table.javaClassName}Entity ${table.javaVariableName}Entity);
	
}
