#if(${table.javaPackageName})
	#set($pkgPrefix="${table.javaPackageName}.")
#else
	#set($pkgPrefix="")
#end
package ${pkgPrefix}controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.antengine.framework.aop.Authz;
import com.antengine.framework.aop.Description;
import com.antengine.framework.base.core.controller.AbstractController;
import com.antengine.framework.common.PageUtil;
import com.antengine.framework.dtgrid.model.Pager;
import com.antengine.framework.dtgrid.util.ExportUtils;
import com.antengine.framework.err.SystemException;
import com.github.pagehelper.Page;

import ${pkgPrefix}service.I${table.javaClassName}Service;
import ${pkgPrefix}entity.${table.javaClassName}Entity;

/**
 * [$!{table.comment}]控制器类.
 * 
 * @author Mania
 * 
 */
@Controller
@RequestMapping("/$!{config.get("tableClassify").concat("/")}${table.xmlName}")
public class ${table.javaClassName}Controller extends AbstractController {
	private Logger logger = LoggerFactory.getLogger(${table.javaClassName}Controller.class);
	/**
	 * 注入的业务处理类.
	 */
	@Autowired
	private I${table.javaClassName}Service i${table.javaClassName}Service;

	@Authz
	@Description("$!{table.comment}数据列表")
	@RequestMapping("/list.html")
	//@org.apache.shiro.authz.annotation.RequiresPermissions("/${table.xmlName}/list.html")
	public String list(Model model, HttpServletRequest request) {
		try {
			PageUtil page = new PageUtil();
			if (request.getParameterMap().containsKey("page")) {
				page.setPageNum(Integer.valueOf(request.getParameter("page")));
				page.setPageSize(Integer.valueOf(request.getParameter("rows")));
			}
			model.addAttribute("page", page);
			return "/$!{config.get("tableClassify").concat("/")}${table.xmlName}/list";
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new SystemException(e.getMessage(), e);
		}
	}
	

	@Description("$!{table.comment}数据列表查询")
	@RequestMapping(value = "/list.html", method = RequestMethod.POST)
	@ResponseBody
	public Object list(String gridPager, HttpServletResponse response) throws Exception {
		//1、映射Pager对象
		Pager pager = JSON.parseObject(gridPager, Pager.class);
		//2、设置查询参数
		${table.javaClassName}Entity param = new ${table.javaClassName}Entity();
		fillWithMap(param, pager.getParameters());
		//3、判断是否是导出操作
		if (pager.getIsExport()) {
			if (pager.getExportAllData()) {
				//3.1、导出全部数据
				List<${table.javaClassName}Entity> limitedList = i${table.javaClassName}Service.getLimitedList(param);
				ExportUtils.exportAll(response, pager, limitedList);
				return null;
			} else {
				//3.2、导出当前页数据
				ExportUtils.export(response, pager);
				return null;
			}
		} else {
			//设置分页，page里面包含了分页信息
			Page<${table.javaClassName}Entity> page = i${table.javaClassName}Service.getPage(param, pager.getNowPage(), pager.getPageSize());
			Map<String, Object> parameters = new HashMap<String, Object>();
			parameters.clear();
			parameters.put("isSuccess", Boolean.TRUE);
			parameters.put("nowPage", page.getPageNum());
			parameters.put("pageSize", page.getPageSize());
			parameters.put("pageCount", page.getPages());
			parameters.put("recordCount", page.getTotal());
			parameters.put("startRecord", page.getStartRow());
			parameters.put("exhibitDatas", page);//列表展示数据
			return parameters;
		}
	}

	@Authz
	@Description("$!{table.comment}新增页面")
	@RequestMapping("/toadd.html")
	public String add(Model model, HttpServletRequest request) {
		return "/$!{config.get("tableClassify").concat("/")}${table.xmlName}/form";
	}

	@Authz
	@Description("$!{table.comment}数据新增")
	@RequestMapping("/add.html")
	@ResponseBody
	public Map<String, Object> add(HttpServletRequest request, ${table.javaClassName}Entity ${table.javaVariableName}Entity) {
		Map<String, Object> map = new HashMap<String, Object>();
		int result = 0;
		try {
			result = i${table.javaClassName}Service.insert(${table.javaVariableName}Entity);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		if (result == 1) {
			map.put("success", Boolean.TRUE);
			map.put("data", null);
			map.put("message", "添加成功");
		} else {
			map.put("success", Boolean.FALSE);
			map.put("data", null);
			map.put("message", "添加失败");
		}
		return map;
	}
	
	@Authz
	@Description("$!{table.comment}编辑页面")
	@RequestMapping("/toedit.html")
	public String edit(Model model, HttpServletRequest request, ${table.javaClassName}Entity param) {
		try {
			${table.javaClassName}Entity ${table.javaVariableName}Entity = i${table.javaClassName}Service.getById(param);
			PageUtil page = new PageUtil();
			page.setPageNum(Integer.valueOf(request.getParameter("page")));
			page.setPageSize(Integer.valueOf(request.getParameter("rows")));

			model.addAttribute("page", page);
			model.addAttribute("${table.javaVariableName}Entity", ${table.javaVariableName}Entity);
			return "/$!{config.get("tableClassify").concat("/")}${table.xmlName}/form";
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new SystemException(e.getMessage(), e);
		}
	}
	
	@Authz
	@Description("$!{table.comment}数据更新")
	@RequestMapping("/edit.html")
	@ResponseBody
	public Map<String, Object> edit(HttpServletRequest request, ${table.javaClassName}Entity ${table.javaVariableName}Entity) {
		Map<String, Object> map = new HashMap<String, Object>();
		int result = 0;
		try {
			result = i${table.javaClassName}Service.update(${table.javaVariableName}Entity);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		if (result == 1) {
			map.put("success", Boolean.TRUE);
			map.put("data", null);
			map.put("message", "编辑成功");
		} else {
			map.put("success", Boolean.FALSE);
			map.put("data", null);
			map.put("message", "编辑失败");
		}
		return map;
	}
	
	@Authz
	@Description("$!{table.comment}数据删除")
	@RequestMapping("delete.html")
	@ResponseBody
	public Object delete(${table.javaClassName}Entity ${table.javaVariableName}Entity) {
		Map<String, Object> map = new HashMap<String, Object>();
		int result = 0;
		try {
			result = i${table.javaClassName}Service.delete(${table.javaVariableName}Entity);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		if (result == 1) {
			map.put("success", Boolean.TRUE);
			map.put("data", null);
			map.put("message", "删除成功");
		} else {
			map.put("success", Boolean.FALSE);
			map.put("data", null);
			map.put("message", "删除失败");
		}
		return map;
	}
}
