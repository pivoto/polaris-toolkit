#parse("/vm/include.vm")
package ${pkgPrefix}${env.entityPackage.replace('/','.')};

import io.polaris.core.jdbc.annotation.Table;
import io.polaris.core.jdbc.annotation.Column;
import io.polaris.core.jdbc.annotation.Id;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;
import lombok.experimental.FieldNameConstants;
import java.io.Serializable;

import javax.validation.Valid;
import javax.validation.constraints.*;
import io.polaris.validation.group.*;

#foreach($name in $table.columnJavaTypes)
import $name;
#end
#if(${env.entityExtInterface})
	#set($env.entityExtInterfaceArr=${env.entityExtInterface.split(',')})
	#foreach($name in ${env.entityExtInterfaceArr})
import ${name.trim()};
	 #if(${name.endsWith('.TranslatedCreatable')})
		 #set($env.entityExtInterfaceTranslatedCreatable=true)
	 #end
	 #if(${name.endsWith('.TranslatedUpdatable')})
		 #set($env.entityExtInterfaceTranslatedUpdatable=true)
	 #end
	#end
#end
#if(${env.entityExtSuperClass})
	#set($env.entityExtSuperClassArr=${env.entityExtSuperClass.split(',')})
	#foreach($name in ${env.entityExtSuperClassArr})
import ${name.trim()};
	#end
#end
/**
 * $!{table.name}
 * $!{table.comment}
 * @author $!{env.author}
## * @since ${current.date}
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Table(value = "$!{table.name}")
@FieldNameConstants
@SuppressWarnings("PMD")
public class ${table.javaClassName}${env.entityClassSuffix}#if(${env.entityExtSuperClass})
	#set($env.entityExtSuperClassArr=${env.entityExtSuperClass.split(',')})
	extends #foreach($name in ${env.entityExtSuperClassArr})${name.trim().substring(1 + ${name.trim().lastIndexOf(".")})}#if(${foreach.hasNext}), #end#end
#end implements Serializable#if(${env.entityExtInterface})
	#set($env.entityExtInterfaceArr=${env.entityExtInterface.split(',')})
	#foreach($name in ${env.entityExtInterfaceArr}), ${name.trim().substring(1 + ${name.trim().lastIndexOf(".")})}#end
#end{

	private static final long serialVersionUID = 1L;

#foreach($col in $table.pkColumns)
	/** 主键字段: #if(${col.label})$!{col.name} $!{col.label}#else$!{col.name}#end */
	@Schema(description = "#if(${col.label})$!{col.label}#else$!{col.name}#end")
	@Id
	@Column(value = "$!{col.name}")
	#if(${col.javaClassType}=='String')
	@NotEmpty(groups = {Create.class, Update.class, Delete.class, Retrieve.class, UpdateEntire.class}, message = "#if($col.label)$col.label#else$col.name#end[${col.javaVariableName}]不能为空")
	#else
	@NotNull(groups = {Create.class, Update.class, Delete.class, Retrieve.class, UpdateEntire.class}, message = "#if($col.label)$col.label#else$col.name#end[${col.javaVariableName}]不能为空")
	#end
	private ${col.javaTypeSimpleName} ${col.javaVariableName};
#end

#foreach($col in $table.normalColumns)
	/** #if(${col.label})$!{col.name} $!{col.label}#else$!{col.name}#end */
	@Schema(description = "#if(${col.label})$!{col.label}#else$!{col.name}#end")
	@Column(value = "$!{col.name}")
	#if(!${col.nullable})
		#if(${col.javaClassType}=='String')
	@NotEmpty(groups = {Create.class, UpdateEntire.class}, message = "#if($col.label)$col.label#else$col.name#end[${col.javaVariableName}]不能为空")
		#else
	@NotNull(groups = {Create.class, UpdateEntire.class}, message = "#if($col.label)$col.label#else$col.name#end[${col.javaVariableName}]不能为空")
		#end
	#end
	private ${col.javaTypeSimpleName} ${col.javaVariableName};
#end

#if(${env.entityExtInterfaceTranslatedCreatable})
	@Column(ignored = true)
	@Getter
	@Setter
	private transient String crtUserName;
#end
#if(${env.entityExtInterfaceTranslatedUpdatable})
	@Column(ignored = true)
	@Getter
	@Setter
	private transient String uptUserName;
#end

}
