#parse("/vm/include.vm")
package ${pkgPrefix}${env.servicePackage.replace('/','.')};

import java.util.List;
import java.util.Map;
import java.util.function.Function;
import lombok.*;
import lombok.experimental.*;
import lombok.extern.slf4j.*;

import org.apache.ibatis.cursor.Cursor;
import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import ${pkgPrefix}${env.mapperPackage.replace('/','.')}.${table.javaClassName}${env.mapperClassSuffix};
import ${pkgPrefix}${env.entityPackage.replace('/','.')}.${table.javaClassName}${env.entityClassSuffix};

import javax.validation.Valid;
import javax.validation.constraints.*;
import io.polaris.validation.group.*;
import io.polaris.validation.Validations;
import io.polaris.core.jdbc.sql.query.OrderBy;
import io.polaris.core.jdbc.sql.query.Queries;
import io.polaris.core.jdbc.sql.query.Pageable;
import io.polaris.mybatis.util.MybatisToolkit;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import io.polaris.bf.core.fs.domain.ExcelFileDto;
import io.polaris.bf.core.fs.domain.FileDto;
import io.polaris.bf.core.fs.excel.ExcelConfig;
import io.polaris.sdk.tmc.brm.session.AppSessions;
import io.polaris.sdk.tmc.common.entity.Creatable;
import io.polaris.sdk.tmc.common.entity.Updatable;
import io.polaris.sdk.tmc.brm.cache.BrmCaches;

/**
 * $!{table.name}
 * $!{table.comment}
 * @author $!{env.author}
## * @since ${current.date}
 */
@Slf4j
@Service
public class ${table.javaClassName}${env.serviceClassSuffix} {

	private final ${table.javaClassName}${env.mapperClassSuffix} mapper;

	public ${table.javaClassName}${env.serviceClassSuffix}(@Autowired ${table.javaClassName}${env.mapperClassSuffix} mapper) {
		this.mapper = mapper;
	}

	@Transactional(rollbackFor = Exception.class)
	public <V> V doTransactional(Function<${table.javaClassName}${env.mapperClassSuffix}, V> function) {
		return function.apply(mapper);
	}


	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto export(${table.javaClassName}${env.entityClassSuffix} param, Pageable page) {
		return toFileDto(mapper.selectEntityCursor(param, page.getOrderBy()));
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto export(Map<String,Object> param, Pageable page) {
		return toFileDto(mapper.selectEntityCursorByMap(param, page.getOrderBy()));
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto export(${table.javaClassName}${env.entityClassSuffix} param, Pageable page, ExcelConfig excelConfig) {
		return toFileDto(mapper.selectEntityCursor(param, page.getOrderBy()), excelConfig);
	}

	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public FileDto export(Map<String,Object> param, Pageable page, ExcelConfig excelConfig) {
		return toFileDto(mapper.selectEntityCursorByMap(param, page.getOrderBy()), excelConfig);
	}

	public ExcelConfig buildDefaultExcelConfig() {
		String fileName = "#if(${table.label})$!{table.label}#else$!{table.name}#end.xlsx";
		return new ExcelConfig()
			.withFileName(fileName)
#foreach($col in $table.columns)
			#if(${env.entityExtInterface.contains('.TranslatedCreatable')} && ${col.javaVariableName.equals('crtUser')})
			.withColumn("crtUserName", "#if(${col.label})${col.label}#else${col.name}#end")
			#elseif(${env.entityExtInterface.contains('.TranslatedUpdatable')} && ${col.javaVariableName.equals('uptUser')})
			.withColumn("uptUserName", "#if(${col.label})${col.label}#else${col.name}#end")
			#else
			.withColumn("${col.javaVariableName}", "#if(${col.label})${col.label}#else${col.name}#end")
			#end
#end
			;
	}
	public FileDto toFileDto(Cursor<${table.javaClassName}${env.entityClassSuffix}> cursor, ExcelConfig config) {
		FileDto fileDto = new FileDto().withFileName(config.getFileName());
		ExcelFileDto excel = fileDto.toExcelFile(config);
		excel.toFile(MybatisToolkit.buildVisitable(cursor, e-> BrmCaches.transUpdatable(BrmCaches.transCreatable(e))));
		return fileDto;
	}
	public FileDto toFileDto(Cursor<${table.javaClassName}${env.entityClassSuffix}> cursor) {
		return toFileDto(cursor, buildDefaultExcelConfig());
	}

	/**
	 * 查询满足条件的总数
	 *
	 * @param param 查询条件对象
	 * @return 结果总数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int getCount(${table.javaClassName}${env.entityClassSuffix} param) {
		log.info("查询表[${table.name}]记录数.param={}", param);
		int count = mapper.countEntity(param);
		return count;
	}
	/**
	 * 查询满足条件的总数
	 *
	 * @param param 查询条件对象
	 * @return 结果总数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int getCount(Map<String,Object> param) {
		log.info("查询表[${table.name}]记录数.param={}", param);
		int count = mapper.countEntityByMap(param);
		return count;
	}

	/**
	 * 分页查询所有数据,返回当前页{@link Page}对象
	 *
	 * @param param 查询条件对象
	 * @param pageNum 页码
	 * @param pageSize 每页记录数
	 * @return 当前页对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public Page<${table.javaClassName}${env.entityClassSuffix}> getPage(${table.javaClassName}${env.entityClassSuffix} param, int pageNum, int pageSize) {
		log.info("查询表[${table.name}]结果集.param={},pageNum={},pageSize={}", param, pageNum, pageSize);
		Page<${table.javaClassName}${env.entityClassSuffix}> page = PageHelper.startPage(pageNum, pageSize, false);
		List<${table.javaClassName}${env.entityClassSuffix}> list = mapper.selectEntityList(param);
		if(list instanceof Page){
			page = (Page<${table.javaClassName}${env.entityClassSuffix}>) list;
		}else{
			page.addAll(list);
		}
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		int total = mapper.countEntity(param);
		page.setTotal(total);
		return page;
	}
	/**
	 * 分页查询所有数据,返回当前页{@link Page}对象
	 *
	 * @param param 查询条件对象
	 * @param pageNum 页码
	 * @param pageSize 每页记录数
	 * @return 当前页对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public Page<${table.javaClassName}${env.entityClassSuffix}> getPage(Map<String,Object> param, int pageNum, int pageSize) {
		log.info("查询表[${table.name}]结果集.param={},pageNum={},pageSize={}", param, pageNum, pageSize);
		Page<${table.javaClassName}${env.entityClassSuffix}> page = PageHelper.startPage(pageNum, pageSize, false);
		List<${table.javaClassName}${env.entityClassSuffix}> list = mapper.selectEntityListByMap(param);
		if(list instanceof Page){
			page = (Page<${table.javaClassName}${env.entityClassSuffix}>) list;
		}else{
			page.addAll(list);
		}
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		int total = mapper.countEntityByMap(param);
		page.setTotal(total);
		return page;
	}

	/**
	 * 分页查询所有数据, 无分页参数时返回所有数据
	 *
	 * @param param 查询条件对象
	 * @param page 分布参数
	 * @return 当前页对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getPage(${table.javaClassName}${env.entityClassSuffix} param, Pageable page) {
		log.info("查询表[${table.name}]结果集.param={},page={}", param, page);
		List<${table.javaClassName}${env.entityClassSuffix}> list = null;
		if (page == null) {
			list = mapper.selectEntityList(param);
		} else{
			Page<${table.javaClassName}${env.entityClassSuffix}> data = PageHelper.startPage(page.getPageNum(),page.getPageSize(),true)
				.doSelectPage(() -> mapper.selectEntityList(param,page.getOrderBy()));
			page.setTotal((int) data.getTotal());
			list = data;
		}
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		return list;
	}
	/**
	 * 分页查询所有数据, 无分页参数时返回所有数据
	 *
	 * @param param 查询条件对象
	 * @param page 分布参数
	 * @return 当前页对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getPage(Map<String,Object> param, Pageable page) {
		log.info("查询表[${table.name}]结果集.param={},page={}", param, page);
		List<${table.javaClassName}${env.entityClassSuffix}> list = null;
		if (page == null) {
			list =  mapper.selectEntityListByMap(param);
		} else {
			Page<${table.javaClassName}${env.entityClassSuffix}> data = PageHelper.startPage(page.getPageNum(), page.getPageSize(), true)
				.doSelectPage(() -> mapper.selectEntityListByMap(param, page.getOrderBy()));
			page.setTotal((int) data.getTotal());
			list = data;
		}
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		return list;
	}

	/**
	 * 查询满足条件的不超过数据量上限的所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getLimitedList(${table.javaClassName}${env.entityClassSuffix} param, int maxCount) {
		log.info("查询表[${table.name}]结果集.param={},maxCount={}", param, maxCount);
		List<${table.javaClassName}${env.entityClassSuffix}> list = PageHelper.startPage(1, maxCount, false)
			.doSelectPage(() -> mapper.selectEntityList(param));
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		return list;
	}

	/**
	 * 查询满足条件的不超过数据量上限的所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getLimitedList(Map<String,Object> param, int maxCount) {
		log.info("查询表[${table.name}]结果集.param={},maxCount={}", param, maxCount);
		List<${table.javaClassName}${env.entityClassSuffix}> list = PageHelper.startPage(1, maxCount, false)
			.doSelectPage(() -> mapper.selectEntityListByMap(param));
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		return list;
	}

	/**
	 * 查询满足条件的所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getList(${table.javaClassName}${env.entityClassSuffix} param) {
		log.info("查询表[${table.name}]结果集.param={}", param);
		List<${table.javaClassName}${env.entityClassSuffix}> list = mapper.selectEntityList(param);
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		return list;
	}
	/**
	 * 查询满足条件的所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getList(Map<String,Object> param) {
		log.info("查询表[${table.name}]结果集.param={}", param);
		List<${table.javaClassName}${env.entityClassSuffix}> list = mapper.selectEntityListByMap(param);
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		return list;
	}

	/**
	 * 分页查询所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @param pageIndex 页码
	 * @param pageSize 每页记录数
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getList(${table.javaClassName}${env.entityClassSuffix} param, int pageIndex, int pageSize) {
		log.info("查询表[${table.name}]结果集.param={},pageIndex={},pageSize={}", param, pageIndex, pageSize);
		List<${table.javaClassName}${env.entityClassSuffix}> list = PageHelper.startPage(pageIndex, pageSize, false)
			.doSelectPage(() -> mapper.selectEntityList(param));
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		return list;
	}
	/**
	 * 分页查询所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @param pageIndex 页码
	 * @param pageSize 每页记录数
	 * @return 结果对象列表
	 */
	@Transactional(rollbackFor = Exception.class)
	public List<${table.javaClassName}${env.entityClassSuffix}> getList(Map<String,Object> param, int pageIndex, int pageSize) {
		log.info("查询表[${table.name}]结果集.param={},pageIndex={},pageSize={}", param, pageIndex, pageSize);
		List<${table.javaClassName}${env.entityClassSuffix}> list = PageHelper.startPage(pageIndex, pageSize, false)
			.doSelectPage(() -> mapper.selectEntityListByMap(param));
		BrmCaches.transCreatable(list);
		BrmCaches.transUpdatable(list);
		return list;
	}

	/**
	 * 新增一条记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int insertEntire(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("新增表[${table.name}]记录.entity={}", entity);
		AppSessions.fillCreatable((Creatable)entity);
		Validations.validate(entity, Create.class);
		return mapper.insertEntity(entity, true);
	}

	/**
	 * 新增一条记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int insertSelective(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("新增表[${table.name}]记录.entity={}", entity);
		AppSessions.fillCreatable((Creatable)entity);
		Validations.validate(entity, Create.class);
		return mapper.insertEntity(entity);
	}

	/**
	 * 根据主键列，删除一条记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int delete(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("根据主键删除表[${table.name}]记录.entity={}", entity);
		Validations.validate(entity, Delete.class);
		return mapper.deleteEntityById(entity);
	}

	/**
	 * 根据主键列，修改一条记录,按入参修改所有列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int updateEntire(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("根据主键更新表[${table.name}]记录.entity={}", entity);
		AppSessions.fillUpdatable((Updatable)entity);
		Validations.validate(entity, UpdateEntire.class);
		return mapper.updateEntityById(entity, true);
	}

	/**
	 * 根据主键列，修改一条记录,只修改入参的非空字段对应的列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	@Transactional(rollbackFor = Exception.class)
	public int updateSelective(${table.javaClassName}${env.entityClassSuffix} entity) {
		log.info("根据主键更新表[${table.name}]记录.entity={}", entity);
		AppSessions.fillUpdatable((Updatable)entity);
		Validations.validate(entity, Update.class);
		return mapper.updateEntityById(entity);
	}

	/**
	 * 根据主键列查询对象
	 *
	 * @param param 查询条件对象
	 * @return 结果对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public ${table.javaClassName}${env.entityClassSuffix} getById(${table.javaClassName}${env.entityClassSuffix} param) {
		log.info("根据主键查询表[${table.name}]记录.param={}", param);
		Validations.validate(param, Retrieve.class);
		${table.javaClassName}${env.entityClassSuffix} entity =  mapper.selectEntityById(param);
		BrmCaches.transCreatable(entity);
		BrmCaches.transUpdatable(entity);
		return entity;
	}

	/**
	 * 根据条件查询唯一结果
	 *
	 * @param param 查询条件对象
	 * @return 唯一结果对象
	 */
	@Transactional(rollbackFor = Exception.class)
	public ${table.javaClassName}${env.entityClassSuffix} getUnique(${table.javaClassName}${env.entityClassSuffix} param) {
		log.info("根据主键查询表[${table.name}]记录.param={}", param);
		${table.javaClassName}${env.entityClassSuffix} entity =  mapper.selectEntity(param);
		BrmCaches.transCreatable(entity);
		BrmCaches.transUpdatable(entity);
		return entity;
	}

}
