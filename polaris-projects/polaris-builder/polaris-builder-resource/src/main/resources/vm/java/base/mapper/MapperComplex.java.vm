#parse("/vm/include.vm")
package ${pkgPrefix}${env.mapperPackage.replace('/','.')};

import io.polaris.mybatis.mapper.*;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.session.RowBounds;
import org.springframework.stereotype.Repository;

import ${pkgPrefix}${env.entityPackage.replace('/','.')}.${table.javaClassName}${env.entityClassSuffix};;

/**
 * ${table.name}
 * $!{table.comment}
 * @author $!{env.author}
## * @since ${current.date}
 */
@Mapper
public interface ${table.javaClassName}${env.mapperClassSuffix} extends
	EntityInsertMapper<${table.javaClassName}${env.entityClassSuffix}>,
	EntityDeleteByIdMapper<${table.javaClassName}${env.entityClassSuffix}>,
	EntityDeleteByAnyMapper<${table.javaClassName}${env.entityClassSuffix}>,
	EntityUpdateByIdMapper<${table.javaClassName}${env.entityClassSuffix}>,
	EntityUpdateByAnyMapper<${table.javaClassName}${env.entityClassSuffix}>,
	EntityCountMapper<${table.javaClassName}${env.entityClassSuffix}>,
	EntitySelectMapper<${table.javaClassName}${env.entityClassSuffix}>,
	EntitySelectListMapper<${table.javaClassName}${env.entityClassSuffix}>,
	EntitySelectCursorMapper<${table.javaClassName}${env.entityClassSuffix}>,
	InsertStatementMapper,
	DeleteStatementMapper,
	UpdateStatementMapper,
	SelectStatementMapper<${table.javaClassName}${env.entityClassSuffix}>,
	SelectStatementCursorMapper<${table.javaClassName}${env.entityClassSuffix}> {

	/**
	 * 查询总数
	 *
	 * @param param 查询条件对象
	 * @return 总数
	 */
	int doCount(${table.javaClassName}${env.entityClassSuffix} param);
	/**
	 * 查询总数
	 *
	 * @param param 查询条件对象
	 * @return 总数
	 */
	int doCount(Map<String,Object> param);

	/**
	 * 查询所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @return 结果对象列表
	 */
	List<${table.javaClassName}${env.entityClassSuffix}> doGetAll(${table.javaClassName}${env.entityClassSuffix} param);
	/**
	 * 查询所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @return 结果对象列表
	 */
	List<${table.javaClassName}${env.entityClassSuffix}> doGetAll(Map<String,Object> param);

	/**
	 * 分页查询所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @param rowBounds 分页条件
	 * @return 结果对象列表
	 */
	List<${table.javaClassName}${env.entityClassSuffix}> doGetAll(${table.javaClassName}${env.entityClassSuffix} param, RowBounds rowBounds);

	/**
	 * 分页查询所有数据,返回{@link List}对象列表
	 *
	 * @param param 查询条件对象
	 * @param rowBounds 分页条件
	 * @return 结果对象列表
	 */
	List<${table.javaClassName}${env.entityClassSuffix}> doGetAll(Map<String,Object> param, RowBounds rowBounds);

	/**
	 * 根据条件查询唯一结果
	 *
	 * @param param 查询条件对象
	 * @return 结果对象
	 */
	${table.javaClassName}${env.entityClassSuffix} doGetUnique(${table.javaClassName}${env.entityClassSuffix} param);
	/**
	 * 根据条件查询唯一结果
	 *
	 * @param param 查询条件对象
	 * @return 结果对象
	 */
	${table.javaClassName}${env.entityClassSuffix} doGetUnique(Map<String,Object> param);

	/**
	 * 根据主键列查询对象
	 *
	 * @param param 查询条件对象
	 * @return 结果对象
	 */
	${table.javaClassName}${env.entityClassSuffix} doGetById(${table.javaClassName}${env.entityClassSuffix} param);
	/**
	 * 根据主键列查询对象
	 *
	 * @param param 查询条件对象
	 * @return 结果对象
	 */
	${table.javaClassName}${env.entityClassSuffix} doGetById(Map<String,Object> param);

	/**
	 * 新增记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doInsert(${table.javaClassName}${env.entityClassSuffix} entity);
	/**
	 * 新增记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doInsert(Map<String,Object> entity);

	/**
	 * 新增记录,只处理入参的非空字段对应的列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doInsertSelective(${table.javaClassName}${env.entityClassSuffix} entity);
	/**
	 * 新增记录,只处理入参的非空字段对应的列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doInsertSelective(Map<String,Object> entity);

	/**
	 * 按主键条件修改记录,按入参修改所有列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doUpdate(${table.javaClassName}${env.entityClassSuffix} entity);
	/**
	 * 按主键条件修改记录,按入参修改所有列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doUpdate(Map<String,Object> entity);

	/**
	 * 按主键条件修改记录,只修改入参的非空字段对应的列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doUpdateSelective(${table.javaClassName}${env.entityClassSuffix} entity);

	/**
	 * 按主键条件修改记录,只修改入参的非空字段对应的列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doUpdateSelective(Map<String,Object> entity);

	/**
	 * 根据查询条件修改多行记录, 只修改值参数<code>${dollar}updateValues</code>中的非空字段对应的列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doUpdateMultiple(${table.javaClassName}${env.entityClassSuffix} entity);

	/**
	 * 根据查询条件修改多行记录, 只修改值参数<code>${dollar}updateValues</code>中的非空字段对应的列
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doUpdateMultiple(Map<String,Object> entity);

	/**
	 * 删除记录
	 *
	 * @param entity 记录对象
	 * @return 影响记录数
	 */
	int doDelete(${table.javaClassName}${env.entityClassSuffix} entity);

}

