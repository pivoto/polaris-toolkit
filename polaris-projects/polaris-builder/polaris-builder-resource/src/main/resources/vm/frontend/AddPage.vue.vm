#parse("/vm/include.vm")
<template>
	<div class="dialog-container" ref="refDiv" v-draggable v-resizable="{onresize:onResize}" v-maximizable="{onresize:onResize}">
		<el-dialog title="数据新增" v-model="state.show" width="75%">
			<el-form ref="refForm" :rules="state.rules" :model="state.form" label-width="90px">
				<v-row :gutter="5">
#foreach($col in $table.columns)
	#if(${col.javaVariableName.equals('crtUser')} || ${col.javaVariableName.equals('uptUser')}
		|| ${col.javaVariableName.equals('crtDt')} || ${col.javaVariableName.equals('uptDt')})
## ignore
	#elseif(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
					<v-col class="mb5" :span="colSpan">
						<el-form-item label="${col.label}" prop="${col.javaVariableName}">
							<el-date-picker v-model="state.form.${col.javaVariableName}" placeholder="请输入${col.label}" clearable
								type="datetime" value-format="x" format="YYYY-MM-DD HH:mm:ss" style="width: 200px;"/>
						</el-form-item>
					</v-col>
	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT' || ${col.jdbcType} == 'BIGINT')
					<v-col class="mb5" :span="colSpan">
						<el-form-item label="${col.label}" prop="${col.javaVariableName}">
							<el-input-number v-model="state.form.${col.javaVariableName}" placeholder="请输入${col.label}" clearable
								:precision="0" style="width: 200px;" />
						</el-form-item>
					</v-col>
	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' || ${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
					<v-col class="mb5" :span="colSpan">
						<el-form-item label="${col.label}" prop="${col.javaVariableName}">
							<el-input-number v-model="state.form.${col.javaVariableName}" placeholder="请输入${col.label}" clearable
								:precision="${col.decimalDigits}" style="width: 200px;" />
						</el-form-item>
					</v-col>
	#else
		#if(${col.name.toLowerCase().endsWith('_sts')})
					<v-col class="mb5" :span="colSpan">
						<el-form-item label="${col.label}" prop="${col.javaVariableName}">
							<el-switch v-model="state.form.${col.javaVariableName}" width="60"
								:active-value="'A'" :inactive-value="'I'" inline-prompt
								active-text="生效" inactive-text="失效"></el-switch>
						</el-form-item>
					</v-col>
		#else
					<v-col class="mb5" :span="colSpan">
						<el-form-item label="${col.label}" prop="${col.javaVariableName}">
							<el-input v-model="state.form.${col.javaVariableName}" placeholder="请输入${col.label}" clearable style="width: 200px;"></el-input>
						</el-form-item>
					</v-col>
		#end
	#end
#end
				</v-row>
			</el-form>
			<template #footer>
				<div class="dialog-footer">
					<el-button icon="EleCircleCheckFilled" type="primary" @click="onSubmit()">提交</el-button>
					<el-button icon="EleCircleCloseFilled" type="primary" @click="onCancel()">取消</el-button>
				</div>
			</template>
		</el-dialog>
	</div>
</template>
<script lang="ts">
export default {
	name: "Add${table.javaClassName}"
}
</script>
<script setup lang="ts">
import {
	computed, watch, provide, inject, nextTick,
	defineComponent, getCurrentInstance,
	onMounted, onActivated, onDeactivated, onUnmounted,
	reactive, ref, shallowReactive, shallowRef, toRefs, PropType
} from "vue";
import type {FormInstance, FormRules} from 'element-plus'
import type {RuleItem, ValidateError, ValidateFieldsError} from 'async-validator';

import VRow from '/@/components/page/VRow.vue'
import VCol from '/@/components/page/VCol.vue'
import msg, {error} from "/@/common/core/msg";
import * as validation from "/@/common/core/validation";
import {formatDate} from "/@/common/core/date";
import {apix} from "/@/common/api";
import {PromiseResult} from "/@/common/core/utils";
import ApiOutput from "/@/common/api/ApiOutput";

const props = defineProps({
	show: {
		type: Boolean,
		required: false,
		default: true
	},
});

const emits = defineEmits<{
	(e: 'update:show', show: boolean): void,
	(e: 'afterSubmit'): void,
}>();

type FormType = {
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT' || ${col.jdbcType} == 'BIGINT')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
	#elseif(${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' || ${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
	${col.javaVariableName}#if(${col.nullable})?#end: number,
	#else
	${col.javaVariableName}#if(${col.nullable})?#end: string,
	#end
#end
}
type StateType = {
	show: boolean,
	form: FormType,
	rules: FormRules<FormType>,
	winWidth: number,
};
const Fields = {
#foreach($col in $table.columns)
	${col.javaVariableName}: '${col.label}',
#end
};
const instance = getCurrentInstance();
const proxy = instance?.proxy;
const refDiv = shallowRef<HTMLElement | null>(null);
const refForm = ref<FormInstance>()
const state = reactive<StateType>({
	show: props.show,
	form: {
#foreach($col in $table.columns)
	#if(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
		${col.javaVariableName}: #if(${col.nullable}) undefined #else 0 #end,
	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT' || ${col.jdbcType} == 'BIGINT' || ${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' || ${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
		${col.javaVariableName}: #if(${col.nullable}) undefined #else 0 #end,
	#else
		${col.javaVariableName}: #if(${col.nullable}) undefined #else '' #end,
	#end
#end
	},
	rules: {},
	winWidth: document.documentElement.clientWidth * 0.8,
});
const colSpan = computed<number>(()=>Math.min(Math.max(1,Math.round(350*24/state.winWidth)),24));

const requiredNumberValidator:()=>RuleItem = ()=>{
	return {
		validator: (rule, value, callback) => {
				if (value == null || /^\s*$/.test(value)) {
					return new Error('不能为空');
				}
			callback();
		}
	};
}
const requiredStringValidator:()=>RuleItem = ()=>{
	return {
		validator: (rule, value, callback) => {
			if (value == null || /^\s*$/.test(value)) {
				return new Error('不能为空');
			}
			if (/\s+/.test(value)) {
				return new Error('不能有空格')
			}
			callback();
		}
	};
}
{
#foreach($col in $table.columns)
	#if(${col.javaVariableName.equals('crtUser')} || ${col.javaVariableName.equals('uptUser')}
	|| ${col.javaVariableName.equals('crtDt')} || ${col.javaVariableName.equals('uptDt')})
## ignore
	#elseif(${col.jdbcType} == 'DATE' || ${col.jdbcType} == 'TIMESTAMP')
		#if(!${col.nullable})
	state.rules.${col.javaVariableName} = [requiredNumberValidator()];
		#end
	#elseif(${col.jdbcType} == 'INTEGER' || ${col.jdbcType} == 'TINYINT' || ${col.jdbcType} == 'SMALLINT' || ${col.jdbcType} == 'BIGINT' || ${col.jdbcType} == 'NUMERIC' || ${col.jdbcType} == 'DECIMAL' || ${col.jdbcType} == 'FLOAT'|| ${col.jdbcType} == 'DOUBLE')
		#if(!${col.nullable})
	state.rules.${col.javaVariableName} = [requiredNumberValidator()];
		#end
	#else
		#if(!${col.nullable})
	state.rules.${col.javaVariableName} = [requiredStringValidator()];
		#end
	#end
#end
}

watch(() => props.show, (nv, ov) => state.show = nv);
watch(() => state.show, (nv, ov) => {
	if (props.show != nv) {
		emits('update:show', nv)
	}
})

function onResize(widthType:WinWidthType, dialog:HTMLElement,header:HTMLElement,body:HTMLElement){
	state.winWidth = dialog.clientWidth;
	console.log('onResize', widthType, dialog.clientWidth, dialog.clientHeight);
}

function updateShow(show: boolean) {
	state.show = show;
	emits('update:show', show);
}

function openDialog() {
	updateShow(true)
}

function closeDialog() {
	updateShow(false)
}

function onSubmit() {
	validation.validateForm(refForm.value as FormInstance, Fields, async ()=>{
		//let rs = await mockSubmitData();
		let rs = await apix({
			method: 'post',
			url: '/api/$!{env.rpcCodePrefix}${table.javaClassName}Dml',
			headers: {},
			data: {
				type: 'INSERT',
				entity: state.form
			}
		});
		console.log(rs.output, rs.error)
		if (rs.hasError()) {
			msg.error(rs.getErrMessage() || '提交失败！')
			return;
		}
		msg.success('提交成功！')
		closeDialog()
		emits('afterSubmit');
	});
}

function onCancel() {
	closeDialog()
}

function mockSubmitData(): Promise<PromiseResult<ApiOutput | null, any>> {
	let data = {};
	return new Promise<PromiseResult<ApiOutput | null, any>>((resolve, reject) => {
		setTimeout(() => {
			resolve(new PromiseResult(new ApiOutput(data), null))
		}, Math.round(100 + Math.random() * 1000));
	})
}

</script>
<style lang="scss">
</style>
