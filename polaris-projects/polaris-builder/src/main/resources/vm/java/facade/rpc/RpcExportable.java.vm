#parse("/vm/include.vm")
package ${pkgPrefixFacade}${env.rpcPackage.replace('/','.')};

import ${pkgPrefix}${env.entityPackage.replace('/','.')}.${table.javaClassName}${env.entityClassSuffix};
import ${pkgPrefix}${env.servicePackage.replace('/','.')}.${table.javaClassName}${env.serviceClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcDmlInputClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcGetInputClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcListInputClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcGetOutputClassSuffix};
import ${pkgPrefixFacade}${env.modelPackage.replace('/','.')}.${table.javaClassName}${env.rpcListOutputClassSuffix};

import io.polaris.core.assertion.Assertions;
import io.polaris.core.jdbc.sql.query.OrderBy;
import io.polaris.core.jdbc.sql.query.Queries;
import io.polaris.core.jdbc.sql.query.Pageable;
import io.polaris.core.lang.bean.Beans;
import io.polaris.core.lang.bean.IBeanMap;
import io.polaris.bf.common.map.BeanMaps;
import io.polaris.bf.core.consts.Bool;
import io.polaris.bf.core.context.domain.ExchangeDto;
import io.polaris.bf.core.data.consts.Dml;
import io.polaris.bf.core.data.domain.Page;
import io.polaris.bf.core.data.domain.QueryDto;
import io.polaris.bf.core.rpc.annotation.RpcService;
import io.polaris.bf.core.rpc.oas.annotation.OpenApi;
import io.polaris.sdk.tmc.brm.session.AppSessions;
import io.polaris.sdk.tmc.common.entity.Creatable;
import io.polaris.sdk.tmc.common.entity.Updatable;

import lombok.extern.slf4j.Slf4j;
import org.springframework.util.Assert;

import java.util.*;
import javax.validation.Valid;

/**
 * $!{table.name}
 * $!{table.comment}
 * @author $!{env.author}
## * @since ${current.date}
 */
@Slf4j
@RpcService
public class ${table.javaClassName}${env.rpcClassSuffix}{

	private final ${table.javaClassName}${env.serviceClassSuffix} ${table.javaVariableName}${env.serviceClassSuffix};

	public ${table.javaClassName}${env.rpcClassSuffix}(${table.javaClassName}${env.serviceClassSuffix} ${table.javaVariableName}${env.serviceClassSuffix}) {
		this.${table.javaVariableName}${env.serviceClassSuffix} = ${table.javaVariableName}${env.serviceClassSuffix};
	}

	@RpcService(active = Bool.FALSE, code = "$!{env.rpcCodePrefix}${table.javaClassName}Dml", name = "数据操作")
	@OpenApi(inputSchema = ${table.javaClassName}${env.rpcDmlInputClassSuffix}.class, outputSchema = ExchangeDto.class)
	public ExchangeDto doDml(@Valid ${table.javaClassName}${env.rpcDmlInputClassSuffix} input) {
		Assertions.assertNotNull(input.getType(), "操作类型不能为空");
		Dml type = input.getType();
		${table.javaClassName}${env.entityClassSuffix} entity = input.getEntity();
		switch (type) {
			case INSERT: {
				${table.javaVariableName}${env.serviceClassSuffix}.insertSelective(entity);
				break;
			}
			case UPDATE: {
				${table.javaVariableName}${env.serviceClassSuffix}.updateSelective(entity);
				break;
			}
			case DELETE: {
				${table.javaVariableName}${env.serviceClassSuffix}.delete(entity);
				break;
			}
			default: // ignore
		}
		return new ExchangeDto();
	}


	@RpcService(active = Bool.FALSE, code = "$!{env.rpcCodePrefix}${table.javaClassName}Get", name = "单行数据查询")
	@OpenApi(inputSchema = ${table.javaClassName}${env.rpcGetInputClassSuffix}.class, outputSchema = ${table.javaClassName}${env.rpcGetOutputClassSuffix}.class)
	public ${table.javaClassName}${env.rpcGetOutputClassSuffix} doGet(@Valid ${table.javaClassName}${env.rpcGetInputClassSuffix} input) {
		${table.javaClassName}${env.entityClassSuffix} entity = ${table.javaVariableName}${env.serviceClassSuffix}.getUnique(
			BeanMaps.of(input.getParam()).copyToBean(new ${table.javaClassName}${env.entityClassSuffix}())
		);
		${table.javaClassName}${env.rpcGetOutputClassSuffix} output = new ${table.javaClassName}${env.rpcGetOutputClassSuffix}();
		output.setEntity(entity);
		return output;
	}

	@RpcService(active = Bool.FALSE, code = "$!{env.rpcCodePrefix}${table.javaClassName}List", name = "列表数据查询")
	@OpenApi(inputSchema = ${table.javaClassName}${env.rpcListInputClassSuffix}.class, outputSchema = ${table.javaClassName}${env.rpcListOutputClassSuffix}.class)
	public ${table.javaClassName}${env.rpcListOutputClassSuffix} doList(@Valid ${table.javaClassName}${env.rpcListInputClassSuffix} input) {
		${table.javaClassName}${env.rpcListOutputClassSuffix} output = new ${table.javaClassName}${env.rpcListOutputClassSuffix}();
		Page page = input.getPage();
		Map<String, Object> param = BeanMaps.of(input.getParam());
		if (page.getOrderBy()==null) {
			OrderBy orderBy = Queries.newOrderBy(input.getSqlOrderBy());
			page.setOrderBy(orderBy);
		}
		List<${table.javaClassName}${env.entityClassSuffix}> list = ${table.javaVariableName}${env.serviceClassSuffix}.getPage(param, page);
		output.setPage(page);
		output.setList(list);
		return output;
	}

	@RpcService(active = Bool.FALSE, code = "$!{env.rpcCodePrefix}${table.javaClassName}Query", name = "通用数据查询")
	@OpenApi(inputSchema = QueryDto.class, outputSchema = ${table.javaClassName}${env.rpcListOutputClassSuffix}.class)
	public ${table.javaClassName}${env.rpcListOutputClassSuffix} doQuery(QueryDto input) {
		${table.javaClassName}${env.rpcListOutputClassSuffix} output = new ${table.javaClassName}${env.rpcListOutputClassSuffix}();
		Page page = input.getPage();
		Map<String, Object> param = input.getParam().getSqlParamMap();
		if (page.getOrderBy()==null) {
			page.setOrderBy(input.getParam().toOrderBy());
		}
		List<${table.javaClassName}${env.entityClassSuffix}> list = ${table.javaVariableName}${env.serviceClassSuffix}.getPage(param, page);
		output.setPage(page);
		output.setList(list);
		return output;
	}

	@RpcService(active = Bool.FALSE, code = "$!{env.rpcCodePrefix}${table.javaClassName}ListExport", name = "列表数据查询导出")
	@OpenApi(inputSchema = ${table.javaClassName}${env.rpcListInputClassSuffix}.class, outputSchema = ExchangeDto.class)
	public ExchangeDto doListExport(@Valid ${table.javaClassName}${env.rpcListInputClassSuffix} input) {
		ExchangeDto output = new ExchangeDto();
		Page page = input.getPage();
		Map<String, Object> param = BeanMaps.of(input.getParam());
		if (page.getOrderBy()==null) {
			OrderBy orderBy = Queries.newOrderBy(input.getSqlOrderBy());
			page.setOrderBy(orderBy);
		}
		output.setDownload(${table.javaVariableName}${env.serviceClassSuffix}.export(param, page));
		return output;
	}

	@RpcService(active = Bool.FALSE, code = "$!{env.rpcCodePrefix}${table.javaClassName}QueryExport", name = "通用数据查询导出")
	@OpenApi(inputSchema = QueryDto.class, outputSchema = ExchangeDto.class)
	public ExchangeDto doQueryExport(QueryDto input) {
		ExchangeDto output = new ExchangeDto();
		Page page = input.getPage();
		Map<String, Object> param = input.getParam().getSqlParamMap();
		if (page.getOrderBy()==null) {
			page.setOrderBy(input.getParam().toOrderBy());
		}
		output.setDownload(${table.javaVariableName}${env.serviceClassSuffix}.export(param, page));
		return output;
	}
}

